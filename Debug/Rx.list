
Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa8  08003fa8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fa8  08003fa8  00013fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fb0  08003fb0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fb4  08003fb4  00013fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000214  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000270  20000270  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000093a4  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000019a3  00000000  00000000  00029473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008b8  00000000  00000000  0002ae18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006a4  00000000  00000000  0002b6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020ad6  00000000  00000000  0002bd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a623  00000000  00000000  0004c84a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c525a  00000000  00000000  00056e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000028e4  00000000  00000000  0011c0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0011e9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ee4 	.word	0x08003ee4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003ee4 	.word	0x08003ee4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	011b      	lsls	r3, r3, #4
 800058a:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	f023 030f 	bic.w	r3, r3, #15
 8000592:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000594:	7bbb      	ldrb	r3, [r7, #14]
 8000596:	f043 030c 	orr.w	r3, r3, #12
 800059a:	b2db      	uxtb	r3, r3
 800059c:	723b      	strb	r3, [r7, #8]
 800059e:	7bbb      	ldrb	r3, [r7, #14]
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	727b      	strb	r3, [r7, #9]
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	f043 030c 	orr.w	r3, r3, #12
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	72bb      	strb	r3, [r7, #10]
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	f043 0308 	orr.w	r3, r3, #8
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <lcd16x2_i2c_sendCommand+0x60>)
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <lcd16x2_i2c_sendCommand+0x64>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b299      	uxth	r1, r3
 80005c6:	f107 0208 	add.w	r2, r7, #8
 80005ca:	23c8      	movs	r3, #200	; 0xc8
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2304      	movs	r3, #4
 80005d0:	f001 ff0a 	bl	80023e8 <HAL_I2C_Master_Transmit>
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000078 	.word	0x20000078
 80005e0:	2000007c 	.word	0x2000007c

080005e4 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	f023 030f 	bic.w	r3, r3, #15
 80005fa:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 80005fc:	7bbb      	ldrb	r3, [r7, #14]
 80005fe:	f043 030d 	orr.w	r3, r3, #13
 8000602:	b2db      	uxtb	r3, r3
 8000604:	723b      	strb	r3, [r7, #8]
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	f043 0309 	orr.w	r3, r3, #9
 800060c:	b2db      	uxtb	r3, r3
 800060e:	727b      	strb	r3, [r7, #9]
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	f043 030d 	orr.w	r3, r3, #13
 8000616:	b2db      	uxtb	r3, r3
 8000618:	72bb      	strb	r3, [r7, #10]
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	f043 0309 	orr.w	r3, r3, #9
 8000620:	b2db      	uxtb	r3, r3
 8000622:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <lcd16x2_i2c_sendData+0x60>)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <lcd16x2_i2c_sendData+0x64>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b299      	uxth	r1, r3
 800062e:	f107 0208 	add.w	r2, r7, #8
 8000632:	23c8      	movs	r3, #200	; 0xc8
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2304      	movs	r3, #4
 8000638:	f001 fed6 	bl	80023e8 <HAL_I2C_Master_Transmit>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000078 	.word	0x20000078
 8000648:	2000007c 	.word	0x2000007c

0800064c <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000654:	2032      	movs	r0, #50	; 0x32
 8000656:	f000 fceb 	bl	8001030 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 800065a:	4a30      	ldr	r2, [pc, #192]	; (800071c <lcd16x2_i2c_init+0xd0>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000660:	4b2e      	ldr	r3, [pc, #184]	; (800071c <lcd16x2_i2c_init+0xd0>)
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000668:	2205      	movs	r2, #5
 800066a:	214e      	movs	r1, #78	; 0x4e
 800066c:	f001 ffba 	bl	80025e4 <HAL_I2C_IsDeviceReady>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d010      	beq.n	8000698 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <lcd16x2_i2c_init+0xd0>)
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800067e:	2205      	movs	r2, #5
 8000680:	217e      	movs	r1, #126	; 0x7e
 8000682:	f001 ffaf 	bl	80025e4 <HAL_I2C_IsDeviceReady>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <lcd16x2_i2c_init+0x44>
    {
      return false;
 800068c:	2300      	movs	r3, #0
 800068e:	e040      	b.n	8000712 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <lcd16x2_i2c_init+0xd4>)
 8000692:	227e      	movs	r2, #126	; 0x7e
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	e002      	b.n	800069e <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <lcd16x2_i2c_init+0xd4>)
 800069a:	224e      	movs	r2, #78	; 0x4e
 800069c:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 800069e:	202d      	movs	r0, #45	; 0x2d
 80006a0:	f000 fcc6 	bl	8001030 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 80006a4:	2030      	movs	r0, #48	; 0x30
 80006a6:	f7ff ff69 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 80006aa:	2005      	movs	r0, #5
 80006ac:	f000 fcc0 	bl	8001030 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006b0:	2030      	movs	r0, #48	; 0x30
 80006b2:	f7ff ff63 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 fcba 	bl	8001030 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006bc:	2030      	movs	r0, #48	; 0x30
 80006be:	f7ff ff5d 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80006c2:	2008      	movs	r0, #8
 80006c4:	f000 fcb4 	bl	8001030 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 80006c8:	2020      	movs	r0, #32
 80006ca:	f7ff ff57 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80006ce:	2008      	movs	r0, #8
 80006d0:	f000 fcae 	bl	8001030 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80006d4:	2028      	movs	r0, #40	; 0x28
 80006d6:	f7ff ff51 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 fca8 	bl	8001030 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 80006e0:	2008      	movs	r0, #8
 80006e2:	f7ff ff4b 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 fca2 	bl	8001030 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff ff45 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80006f2:	2003      	movs	r0, #3
 80006f4:	f000 fc9c 	bl	8001030 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 80006f8:	2006      	movs	r0, #6
 80006fa:	f7ff ff3f 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f000 fc96 	bl	8001030 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8000704:	200c      	movs	r0, #12
 8000706:	f7ff ff39 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800070a:	2003      	movs	r0, #3
 800070c:	f000 fc90 	bl	8001030 <HAL_Delay>

  return true;
 8000710:	2301      	movs	r3, #1
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000078 	.word	0x20000078
 8000720:	2000007c 	.word	0x2000007c

08000724 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	460a      	mov	r2, r1
 800072e:	71fb      	strb	r3, [r7, #7]
 8000730:	4613      	mov	r3, r2
 8000732:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d108      	bne.n	8000754 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000748:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff15 	bl	800057c <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8000752:	e007      	b.n	8000764 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800075a:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff0c 	bl	800057c <lcd16x2_i2c_sendCommand>
}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff ff03 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000776:	2003      	movs	r0, #3
 8000778:	f000 fc5a 	bl	8001030 <HAL_Delay>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8000780:	b40f      	push	{r0, r1, r2, r3}
 8000782:	b590      	push	{r4, r7, lr}
 8000784:	b089      	sub	sp, #36	; 0x24
 8000786:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000788:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800078c:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000796:	4618      	mov	r0, r3
 8000798:	f002 ff16 	bl	80035c8 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800079c:	2300      	movs	r3, #0
 800079e:	77fb      	strb	r3, [r7, #31]
 80007a0:	e00a      	b.n	80007b8 <lcd16x2_i2c_printf+0x38>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 80007a2:	7ffb      	ldrb	r3, [r7, #31]
 80007a4:	3320      	adds	r3, #32
 80007a6:	443b      	add	r3, r7
 80007a8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff19 	bl	80005e4 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80007b2:	7ffb      	ldrb	r3, [r7, #31]
 80007b4:	3301      	adds	r3, #1
 80007b6:	77fb      	strb	r3, [r7, #31]
 80007b8:	7ffc      	ldrb	r4, [r7, #31]
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd06 	bl	80001d0 <strlen>
 80007c4:	4603      	mov	r3, r0
 80007c6:	429c      	cmp	r4, r3
 80007c8:	d202      	bcs.n	80007d0 <lcd16x2_i2c_printf+0x50>
 80007ca:	7ffb      	ldrb	r3, [r7, #31]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d9e8      	bls.n	80007a2 <lcd16x2_i2c_printf+0x22>
  }
}
 80007d0:	bf00      	nop
 80007d2:	3724      	adds	r7, #36	; 0x24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80007da:	b004      	add	sp, #16
 80007dc:	4770      	bx	lr
	...

080007e0 <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_RxHeaderTypeDef RxHeader;
uint16_t RxData[2];
uint32_t RxMailBox;


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

	flag=1;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // blue
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80007f6:	f001 fc75 	bl	80020e4 <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80007fc:	4a07      	ldr	r2, [pc, #28]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80007fe:	2100      	movs	r1, #0
 8000800:	4807      	ldr	r0, [pc, #28]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000802:	f000 fe59 	bl	80014b8 <HAL_CAN_GetRxMessage>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000fc 	.word	0x200000fc
 8000814:	40020c00 	.word	0x40020c00
 8000818:	2000011c 	.word	0x2000011c
 800081c:	20000100 	.word	0x20000100
 8000820:	20000080 	.word	0x20000080

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082a:	f000 fb8f 	bl	8000f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082e:	f000 f8b5 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000832:	f000 f99f 	bl	8000b74 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000836:	f000 f91b 	bl	8000a70 <MX_CAN1_Init>
  MX_I2C1_Init();
 800083a:	f000 f96d 	bl	8000b18 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if(lcd16x2_i2c_init(&hi2c1))
 800083e:	484a      	ldr	r0, [pc, #296]	; (8000968 <main+0x144>)
 8000840:	f7ff ff04 	bl	800064c <lcd16x2_i2c_init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d005      	beq.n	8000856 <main+0x32>
      {
    	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000850:	4846      	ldr	r0, [pc, #280]	; (800096c <main+0x148>)
 8000852:	f001 fc47 	bl	80020e4 <HAL_GPIO_WritePin>
      }
  HAL_CAN_Start(&hcan1);
 8000856:	4846      	ldr	r0, [pc, #280]	; (8000970 <main+0x14c>)
 8000858:	f000 fdea 	bl	8001430 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800085c:	2102      	movs	r1, #2
 800085e:	4844      	ldr	r0, [pc, #272]	; (8000970 <main+0x14c>)
 8000860:	f000 ff3c 	bl	80016dc <HAL_CAN_ActivateNotification>

  RxHeader.DLC = 4;
 8000864:	4b43      	ldr	r3, [pc, #268]	; (8000974 <main+0x150>)
 8000866:	2204      	movs	r2, #4
 8000868:	611a      	str	r2, [r3, #16]
  RxHeader.RTR = CAN_RTR_DATA;
 800086a:	4b42      	ldr	r3, [pc, #264]	; (8000974 <main+0x150>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  RxHeader.IDE = CAN_ID_STD;
 8000870:	4b40      	ldr	r3, [pc, #256]	; (8000974 <main+0x150>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  RxHeader.ExtId = 0x00;
 8000876:	4b3f      	ldr	r3, [pc, #252]	; (8000974 <main+0x150>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  RxHeader.StdId = 0x0AA;
 800087c:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <main+0x150>)
 800087e:	22aa      	movs	r2, #170	; 0xaa
 8000880:	601a      	str	r2, [r3, #0]

  HAL_Delay(100);  HAL_Delay(100);
 8000882:	2064      	movs	r0, #100	; 0x64
 8000884:	f000 fbd4 	bl	8001030 <HAL_Delay>
 8000888:	2064      	movs	r0, #100	; 0x64
 800088a:	f000 fbd1 	bl	8001030 <HAL_Delay>

  HAL_Delay(100);
 800088e:	2064      	movs	r0, #100	; 0x64
 8000890:	f000 fbce 	bl	8001030 <HAL_Delay>
  lcd16x2_i2c_setCursor(0, 0);
 8000894:	2100      	movs	r1, #0
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff ff44 	bl	8000724 <lcd16x2_i2c_setCursor>
  lcd16x2_i2c_printf("Welcome...!!!");
 800089c:	4836      	ldr	r0, [pc, #216]	; (8000978 <main+0x154>)
 800089e:	f7ff ff6f 	bl	8000780 <lcd16x2_i2c_printf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  		//if(RxData[0] == 'S'){
	  	  	  if(flag==1)
 80008a2:	4b36      	ldr	r3, [pc, #216]	; (800097c <main+0x158>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d159      	bne.n	800095e <main+0x13a>
	  	  	  {
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); //
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b0:	482e      	ldr	r0, [pc, #184]	; (800096c <main+0x148>)
 80008b2:	f001 fc17 	bl	80020e4 <HAL_GPIO_WritePin>
	  			/*lcd16x2_i2c_setCursor(0, 0);
	  			sprintf(msg, "Received");*/
	  			lcd16x2_i2c_setCursor(0, 0);
 80008b6:	2100      	movs	r1, #0
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff ff33 	bl	8000724 <lcd16x2_i2c_setCursor>
	  			sprintf(msg, "ADC=%d",RxData[0]);
 80008be:	4b30      	ldr	r3, [pc, #192]	; (8000980 <main+0x15c>)
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	463b      	mov	r3, r7
 80008c6:	492f      	ldr	r1, [pc, #188]	; (8000984 <main+0x160>)
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 fe47 	bl	800355c <siprintf>
	  			lcd16x2_i2c_printf(msg);
 80008ce:	463b      	mov	r3, r7
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff55 	bl	8000780 <lcd16x2_i2c_printf>
	  			lcd16x2_i2c_setCursor(1, 0);
 80008d6:	2100      	movs	r1, #0
 80008d8:	2001      	movs	r0, #1
 80008da:	f7ff ff23 	bl	8000724 <lcd16x2_i2c_setCursor>
	  			sprintf(msg, "Distance=%-3dcm",RxData[1]);
 80008de:	4b28      	ldr	r3, [pc, #160]	; (8000980 <main+0x15c>)
 80008e0:	885b      	ldrh	r3, [r3, #2]
 80008e2:	461a      	mov	r2, r3
 80008e4:	463b      	mov	r3, r7
 80008e6:	4928      	ldr	r1, [pc, #160]	; (8000988 <main+0x164>)
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 fe37 	bl	800355c <siprintf>
	  			lcd16x2_i2c_printf(msg);
 80008ee:	463b      	mov	r3, r7
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff45 	bl	8000780 <lcd16x2_i2c_printf>
	  			HAL_Delay(500);
 80008f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fa:	f000 fb99 	bl	8001030 <HAL_Delay>
	  			lcd16x2_i2c_clear();
 80008fe:	f7ff ff35 	bl	800076c <lcd16x2_i2c_clear>

	  			if(RxData[0]>3500)
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <main+0x15c>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	f640 52ac 	movw	r2, #3500	; 0xdac
 800090a:	4293      	cmp	r3, r2
 800090c:	d907      	bls.n	800091e <main+0xfa>
	  			{
	  				lcd16x2_i2c_setCursor(0, 0);
 800090e:	2100      	movs	r1, #0
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff ff07 	bl	8000724 <lcd16x2_i2c_setCursor>
	  				lcd16x2_i2c_printf("Day Mode");
 8000916:	481d      	ldr	r0, [pc, #116]	; (800098c <main+0x168>)
 8000918:	f7ff ff32 	bl	8000780 <lcd16x2_i2c_printf>
 800091c:	e006      	b.n	800092c <main+0x108>
	  			}

	  			else
	  			{
	  				lcd16x2_i2c_setCursor(0, 0);
 800091e:	2100      	movs	r1, #0
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff feff 	bl	8000724 <lcd16x2_i2c_setCursor>
	  				lcd16x2_i2c_printf("Night Mode");
 8000926:	481a      	ldr	r0, [pc, #104]	; (8000990 <main+0x16c>)
 8000928:	f7ff ff2a 	bl	8000780 <lcd16x2_i2c_printf>
	  			}

	  			if(RxData[1]<20)
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <main+0x15c>)
 800092e:	885b      	ldrh	r3, [r3, #2]
 8000930:	2b13      	cmp	r3, #19
 8000932:	d807      	bhi.n	8000944 <main+0x120>
	  			{
	  				lcd16x2_i2c_setCursor(1, 0);
 8000934:	2100      	movs	r1, #0
 8000936:	2001      	movs	r0, #1
 8000938:	f7ff fef4 	bl	8000724 <lcd16x2_i2c_setCursor>
	  				lcd16x2_i2c_printf("Object Detected");
 800093c:	4815      	ldr	r0, [pc, #84]	; (8000994 <main+0x170>)
 800093e:	f7ff ff1f 	bl	8000780 <lcd16x2_i2c_printf>
 8000942:	e006      	b.n	8000952 <main+0x12e>
	  			}

	  			else
	  			{
	  				lcd16x2_i2c_setCursor(1, 0);
 8000944:	2100      	movs	r1, #0
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff feec 	bl	8000724 <lcd16x2_i2c_setCursor>
	  				lcd16x2_i2c_printf("No Obj Detected");
 800094c:	4812      	ldr	r0, [pc, #72]	; (8000998 <main+0x174>)
 800094e:	f7ff ff17 	bl	8000780 <lcd16x2_i2c_printf>
	  			}
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <main+0x148>)
 800095a:	f001 fbc3 	bl	80020e4 <HAL_GPIO_WritePin>
	  	  	  }
	  	  	  HAL_Delay(500);
 800095e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000962:	f000 fb65 	bl	8001030 <HAL_Delay>
	  	  	  if(flag==1)
 8000966:	e79c      	b.n	80008a2 <main+0x7e>
 8000968:	200000a8 	.word	0x200000a8
 800096c:	40020c00 	.word	0x40020c00
 8000970:	20000080 	.word	0x20000080
 8000974:	20000100 	.word	0x20000100
 8000978:	08003efc 	.word	0x08003efc
 800097c:	200000fc 	.word	0x200000fc
 8000980:	2000011c 	.word	0x2000011c
 8000984:	08003f0c 	.word	0x08003f0c
 8000988:	08003f14 	.word	0x08003f14
 800098c:	08003f24 	.word	0x08003f24
 8000990:	08003f30 	.word	0x08003f30
 8000994:	08003f3c 	.word	0x08003f3c
 8000998:	08003f4c 	.word	0x08003f4c

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b094      	sub	sp, #80	; 0x50
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0320 	add.w	r3, r7, #32
 80009a6:	2230      	movs	r2, #48	; 0x30
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fe16 	bl	80035dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <SystemClock_Config+0xcc>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	4a27      	ldr	r2, [pc, #156]	; (8000a68 <SystemClock_Config+0xcc>)
 80009ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ce:	6413      	str	r3, [r2, #64]	; 0x40
 80009d0:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <SystemClock_Config+0xcc>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <SystemClock_Config+0xd0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <SystemClock_Config+0xd0>)
 80009e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <SystemClock_Config+0xd0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f8:	2301      	movs	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a02:	2302      	movs	r3, #2
 8000a04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a10:	2348      	movs	r3, #72	; 0x48
 8000a12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a18:	2307      	movs	r3, #7
 8000a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1c:	f107 0320 	add.w	r3, r7, #32
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 f917 	bl	8002c54 <HAL_RCC_OscConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a2c:	f000 f91a 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a30:	230f      	movs	r3, #15
 8000a32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a34:	2302      	movs	r3, #2
 8000a36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 fb78 	bl	8003144 <HAL_RCC_ClockConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a5a:	f000 f903 	bl	8000c64 <Error_Handler>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3750      	adds	r7, #80	; 0x50
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40007000 	.word	0x40007000

08000a70 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <MX_CAN1_Init+0xa0>)
 8000a78:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <MX_CAN1_Init+0xa4>)
 8000a7a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <MX_CAN1_Init+0xa0>)
 8000a7e:	2212      	movs	r2, #18
 8000a80:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a82:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <MX_CAN1_Init+0xa0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a88:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_CAN1_Init+0xa0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a8e:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <MX_CAN1_Init+0xa0>)
 8000a90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a94:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <MX_CAN1_Init+0xa0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_CAN1_Init+0xa0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_CAN1_Init+0xa0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_CAN1_Init+0xa0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_CAN1_Init+0xa0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_CAN1_Init+0xa0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_CAN1_Init+0xa0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ac0:	4813      	ldr	r0, [pc, #76]	; (8000b10 <MX_CAN1_Init+0xa0>)
 8000ac2:	f000 fad9 	bl	8001078 <HAL_CAN_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000acc:	f000 f8ca 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canFilterConfig;
  canFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
  canFilterConfig.SlaveStartFilterBank=14;
 8000ad4:	230e      	movs	r3, #14
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  canFilterConfig.FilterBank=2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	617b      	str	r3, [r7, #20]
  canFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
  canFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
  canFilterConfig.FilterMaskIdLow=0x0000;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterMaskIdHigh=0xFF00;
 8000aec:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000af0:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterIdLow=0x0000;
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterIdHigh=0x1500;
 8000af6:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000afa:	603b      	str	r3, [r7, #0]
  HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig);
 8000afc:	463b      	mov	r3, r7
 8000afe:	4619      	mov	r1, r3
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <MX_CAN1_Init+0xa0>)
 8000b02:	f000 fbb5 	bl	8001270 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	; 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000080 	.word	0x20000080
 8000b14:	40006400 	.word	0x40006400

08000b18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b1e:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <MX_I2C1_Init+0x54>)
 8000b20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b24:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <MX_I2C1_Init+0x58>)
 8000b26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b56:	f001 fb03 	bl	8002160 <HAL_I2C_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b60:	f000 f880 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000a8 	.word	0x200000a8
 8000b6c:	40005400 	.word	0x40005400
 8000b70:	000186a0 	.word	0x000186a0

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b32      	ldr	r3, [pc, #200]	; (8000c58 <MX_GPIO_Init+0xe4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a31      	ldr	r2, [pc, #196]	; (8000c58 <MX_GPIO_Init+0xe4>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b2f      	ldr	r3, [pc, #188]	; (8000c58 <MX_GPIO_Init+0xe4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <MX_GPIO_Init+0xe4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a2a      	ldr	r2, [pc, #168]	; (8000c58 <MX_GPIO_Init+0xe4>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <MX_GPIO_Init+0xe4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <MX_GPIO_Init+0xe4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <MX_GPIO_Init+0xe4>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <MX_GPIO_Init+0xe4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_GPIO_Init+0xe4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <MX_GPIO_Init+0xe4>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_GPIO_Init+0xe4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c00:	4816      	ldr	r0, [pc, #88]	; (8000c5c <MX_GPIO_Init+0xe8>)
 8000c02:	f001 fa6f 	bl	80020e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c06:	2301      	movs	r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4811      	ldr	r0, [pc, #68]	; (8000c60 <MX_GPIO_Init+0xec>)
 8000c1c:	f001 f8c6 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c20:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <MX_GPIO_Init+0xe8>)
 8000c3a:	f001 f8b7 	bl	8001dac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2006      	movs	r0, #6
 8000c44:	f001 f87b 	bl	8001d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c48:	2006      	movs	r0, #6
 8000c4a:	f001 f894 	bl	8001d76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020c00 	.word	0x40020c00
 8000c60:	40020000 	.word	0x40020000

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cae:	2007      	movs	r0, #7
 8000cb0:	f001 f83a 	bl	8001d28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1d      	ldr	r2, [pc, #116]	; (8000d54 <HAL_CAN_MspInit+0x94>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d134      	bne.n	8000d4c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_CAN_MspInit+0x98>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <HAL_CAN_MspInit+0x98>)
 8000cec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <HAL_CAN_MspInit+0x98>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_CAN_MspInit+0x98>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <HAL_CAN_MspInit+0x98>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_CAN_MspInit+0x98>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d2c:	2309      	movs	r3, #9
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4809      	ldr	r0, [pc, #36]	; (8000d5c <HAL_CAN_MspInit+0x9c>)
 8000d38:	f001 f838 	bl	8001dac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2014      	movs	r0, #20
 8000d42:	f000 fffc 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d46:	2014      	movs	r0, #20
 8000d48:	f001 f815 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3728      	adds	r7, #40	; 0x28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40006400 	.word	0x40006400
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020400 	.word	0x40020400

08000d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <HAL_I2C_MspInit+0x84>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d12b      	bne.n	8000dda <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_I2C_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <HAL_I2C_MspInit+0x88>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_I2C_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d9e:	23c0      	movs	r3, #192	; 0xc0
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da2:	2312      	movs	r3, #18
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dae:	2304      	movs	r3, #4
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	480c      	ldr	r0, [pc, #48]	; (8000dec <HAL_I2C_MspInit+0x8c>)
 8000dba:	f000 fff7 	bl	8001dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_I2C_MspInit+0x88>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_I2C_MspInit+0x88>)
 8000dc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_I2C_MspInit+0x88>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40005400 	.word	0x40005400
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020400 	.word	0x40020400

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 f8d8 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f001 f965 	bl	8002118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <CAN1_RX0_IRQHandler+0x10>)
 8000e5a:	f000 fc65 	bl	8001728 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000080 	.word	0x20000080

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f002 fba8 	bl	80035ec <__errno>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20020000 	.word	0x20020000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	20000120 	.word	0x20000120
 8000ed0:	20000270 	.word	0x20000270

08000ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <SystemInit+0x20>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <SystemInit+0x20>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000efc:	480d      	ldr	r0, [pc, #52]	; (8000f34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000efe:	490e      	ldr	r1, [pc, #56]	; (8000f38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f00:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f14:	4c0b      	ldr	r4, [pc, #44]	; (8000f44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f22:	f7ff ffd7 	bl	8000ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f002 fb67 	bl	80035f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2a:	f7ff fc7b 	bl	8000824 <main>
  bx  lr    
 8000f2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f38:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f3c:	08003fb8 	.word	0x08003fb8
  ldr r2, =_sbss
 8000f40:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f44:	20000270 	.word	0x20000270

08000f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC_IRQHandler>
	...

08000f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <HAL_Init+0x40>)
 8000f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_Init+0x40>)
 8000f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_Init+0x40>)
 8000f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 fed7 	bl	8001d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 f808 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f7ff fe76 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023c00 	.word	0x40023c00

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 feef 	bl	8001d92 <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fcc:	f000 feb7 	bl	8001d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000004 	.word	0x20000004

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	20000124 	.word	0x20000124

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000124 	.word	0x20000124

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff ffee 	bl	8001018 <HAL_GetTick>
 800103c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001048:	d005      	beq.n	8001056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_Delay+0x44>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001056:	bf00      	nop
 8001058:	f7ff ffde 	bl	8001018 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	429a      	cmp	r2, r3
 8001066:	d8f7      	bhi.n	8001058 <HAL_Delay+0x28>
  {
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008

08001078 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0ed      	b.n	8001266 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fe12 	bl	8000cc0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0201 	orr.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ac:	f7ff ffb4 	bl	8001018 <HAL_GetTick>
 80010b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010b2:	e012      	b.n	80010da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010b4:	f7ff ffb0 	bl	8001018 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b0a      	cmp	r3, #10
 80010c0:	d90b      	bls.n	80010da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2205      	movs	r2, #5
 80010d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e0c5      	b.n	8001266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0e5      	beq.n	80010b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0202 	bic.w	r2, r2, #2
 80010f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f8:	f7ff ff8e 	bl	8001018 <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010fe:	e012      	b.n	8001126 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001100:	f7ff ff8a 	bl	8001018 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b0a      	cmp	r3, #10
 800110c:	d90b      	bls.n	8001126 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2205      	movs	r2, #5
 800111e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e09f      	b.n	8001266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1e5      	bne.n	8001100 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7e1b      	ldrb	r3, [r3, #24]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e007      	b.n	800115e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7e5b      	ldrb	r3, [r3, #25]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d108      	bne.n	8001178 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e007      	b.n	8001188 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001186:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7e9b      	ldrb	r3, [r3, #26]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d108      	bne.n	80011a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0220 	orr.w	r2, r2, #32
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e007      	b.n	80011b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0220 	bic.w	r2, r2, #32
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7edb      	ldrb	r3, [r3, #27]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d108      	bne.n	80011cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0210 	bic.w	r2, r2, #16
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e007      	b.n	80011dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0210 	orr.w	r2, r2, #16
 80011da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7f1b      	ldrb	r3, [r3, #28]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d108      	bne.n	80011f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0208 	orr.w	r2, r2, #8
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e007      	b.n	8001206 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0208 	bic.w	r2, r2, #8
 8001204:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7f5b      	ldrb	r3, [r3, #29]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d108      	bne.n	8001220 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 0204 	orr.w	r2, r2, #4
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e007      	b.n	8001230 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0204 	bic.w	r2, r2, #4
 800122e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	ea42 0103 	orr.w	r1, r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	1e5a      	subs	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001286:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001288:	7cfb      	ldrb	r3, [r7, #19]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d003      	beq.n	8001296 <HAL_CAN_ConfigFilter+0x26>
 800128e:	7cfb      	ldrb	r3, [r7, #19]
 8001290:	2b02      	cmp	r3, #2
 8001292:	f040 80be 	bne.w	8001412 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001296:	4b65      	ldr	r3, [pc, #404]	; (800142c <HAL_CAN_ConfigFilter+0x1bc>)
 8001298:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012a0:	f043 0201 	orr.w	r2, r3, #1
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	431a      	orrs	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f003 031f 	and.w	r3, r3, #31
 80012d6:	2201      	movs	r2, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	401a      	ands	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d123      	bne.n	8001340 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43db      	mvns	r3, r3
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800131a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3248      	adds	r2, #72	; 0x48
 8001320:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001334:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001336:	6979      	ldr	r1, [r7, #20]
 8001338:	3348      	adds	r3, #72	; 0x48
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	440b      	add	r3, r1
 800133e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d122      	bne.n	800138e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	431a      	orrs	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001368:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3248      	adds	r2, #72	; 0x48
 800136e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001382:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001384:	6979      	ldr	r1, [r7, #20]
 8001386:	3348      	adds	r3, #72	; 0x48
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	440b      	add	r3, r1
 800138c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43db      	mvns	r3, r3
 80013a0:	401a      	ands	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013a8:	e007      	b.n	80013ba <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d109      	bne.n	80013d6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	401a      	ands	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013d4:	e007      	b.n	80013e6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	431a      	orrs	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d107      	bne.n	80013fe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001404:	f023 0201 	bic.w	r2, r3, #1
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e006      	b.n	8001420 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
  }
}
 8001420:	4618      	mov	r0, r3
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40006400 	.word	0x40006400

08001430 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b01      	cmp	r3, #1
 8001442:	d12e      	bne.n	80014a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2202      	movs	r2, #2
 8001448:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800145c:	f7ff fddc 	bl	8001018 <HAL_GetTick>
 8001460:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001462:	e012      	b.n	800148a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001464:	f7ff fdd8 	bl	8001018 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b0a      	cmp	r3, #10
 8001470:	d90b      	bls.n	800148a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2205      	movs	r2, #5
 8001482:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e012      	b.n	80014b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e5      	bne.n	8001464 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e006      	b.n	80014b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
  }
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014cc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d003      	beq.n	80014dc <HAL_CAN_GetRxMessage+0x24>
 80014d4:	7dfb      	ldrb	r3, [r7, #23]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	f040 80f3 	bne.w	80016c2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10e      	bne.n	8001500 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d116      	bne.n	800151e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0e7      	b.n	80016d0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d107      	bne.n	800151e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0d8      	b.n	80016d0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	331b      	adds	r3, #27
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	4413      	add	r3, r2
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0204 	and.w	r2, r3, #4
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10c      	bne.n	8001556 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	331b      	adds	r3, #27
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	4413      	add	r3, r2
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	0d5b      	lsrs	r3, r3, #21
 800154c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e00b      	b.n	800156e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	331b      	adds	r3, #27
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	4413      	add	r3, r2
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	331b      	adds	r3, #27
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0202 	and.w	r2, r3, #2
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	331b      	adds	r3, #27
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	4413      	add	r3, r2
 8001590:	3304      	adds	r3, #4
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 020f 	and.w	r2, r3, #15
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	331b      	adds	r3, #27
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	4413      	add	r3, r2
 80015a8:	3304      	adds	r3, #4
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	331b      	adds	r3, #27
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	4413      	add	r3, r2
 80015c0:	3304      	adds	r3, #4
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	0c1b      	lsrs	r3, r3, #16
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	4413      	add	r3, r2
 80015d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	0a1a      	lsrs	r2, r3, #8
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	4413      	add	r3, r2
 8001606:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0c1a      	lsrs	r2, r3, #16
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	3302      	adds	r3, #2
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	4413      	add	r3, r2
 8001620:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	0e1a      	lsrs	r2, r3, #24
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	3303      	adds	r3, #3
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	4413      	add	r3, r2
 800163a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	3304      	adds	r3, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	4413      	add	r3, r2
 8001652:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	0a1a      	lsrs	r2, r3, #8
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	3305      	adds	r3, #5
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	4413      	add	r3, r2
 800166c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	0c1a      	lsrs	r2, r3, #16
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	3306      	adds	r3, #6
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	4413      	add	r3, r2
 8001686:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0e1a      	lsrs	r2, r3, #24
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	3307      	adds	r3, #7
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d108      	bne.n	80016ae <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0220 	orr.w	r2, r2, #32
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	e007      	b.n	80016be <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0220 	orr.w	r2, r2, #32
 80016bc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e006      	b.n	80016d0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
  }
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ec:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d002      	beq.n	80016fa <HAL_CAN_ActivateNotification+0x1e>
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d109      	bne.n	800170e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6959      	ldr	r1, [r3, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e006      	b.n	800171c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
  }
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d07c      	beq.n	8001868 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d023      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f983 	bl	8001a96 <HAL_CAN_TxMailbox0CompleteCallback>
 8001790:	e016      	b.n	80017c0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d004      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
 80017a4:	e00c      	b.n	80017c0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
 80017b8:	e002      	b.n	80017c0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f989 	bl	8001ad2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d024      	beq.n	8001814 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f963 	bl	8001aaa <HAL_CAN_TxMailbox1CompleteCallback>
 80017e4:	e016      	b.n	8001814 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
 80017f8:	e00c      	b.n	8001814 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
 800180c:	e002      	b.n	8001814 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f969 	bl	8001ae6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d024      	beq.n	8001868 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001826:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f943 	bl	8001abe <HAL_CAN_TxMailbox2CompleteCallback>
 8001838:	e016      	b.n	8001868 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
 800184c:	e00c      	b.n	8001868 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d004      	beq.n	8001862 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
 8001860:	e002      	b.n	8001868 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f949 	bl	8001afa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00c      	beq.n	800188c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	2b00      	cmp	r3, #0
 800187a:	d007      	beq.n	800188c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001882:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2210      	movs	r2, #16
 800188a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2208      	movs	r2, #8
 80018a6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f930 	bl	8001b0e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d009      	beq.n	80018cc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7fe ff8a 	bl	80007e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00c      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d007      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2210      	movs	r2, #16
 80018ee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00b      	beq.n	8001912 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2208      	movs	r2, #8
 800190a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f912 	bl	8001b36 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	2b00      	cmp	r3, #0
 800191a:	d009      	beq.n	8001930 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f8f9 	bl	8001b22 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2210      	movs	r2, #16
 800194a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f8fc 	bl	8001b4a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00b      	beq.n	8001974 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2208      	movs	r2, #8
 800196c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f8f5 	bl	8001b5e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d07b      	beq.n	8001a76 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d072      	beq.n	8001a6e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198e:	2b00      	cmp	r3, #0
 8001990:	d008      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d008      	beq.n	80019c0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	f043 0302 	orr.w	r3, r3, #2
 80019be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d008      	beq.n	80019dc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d043      	beq.n	8001a6e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d03e      	beq.n	8001a6e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019f6:	2b60      	cmp	r3, #96	; 0x60
 80019f8:	d02b      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x32a>
 80019fa:	2b60      	cmp	r3, #96	; 0x60
 80019fc:	d82e      	bhi.n	8001a5c <HAL_CAN_IRQHandler+0x334>
 80019fe:	2b50      	cmp	r3, #80	; 0x50
 8001a00:	d022      	beq.n	8001a48 <HAL_CAN_IRQHandler+0x320>
 8001a02:	2b50      	cmp	r3, #80	; 0x50
 8001a04:	d82a      	bhi.n	8001a5c <HAL_CAN_IRQHandler+0x334>
 8001a06:	2b40      	cmp	r3, #64	; 0x40
 8001a08:	d019      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x316>
 8001a0a:	2b40      	cmp	r3, #64	; 0x40
 8001a0c:	d826      	bhi.n	8001a5c <HAL_CAN_IRQHandler+0x334>
 8001a0e:	2b30      	cmp	r3, #48	; 0x30
 8001a10:	d010      	beq.n	8001a34 <HAL_CAN_IRQHandler+0x30c>
 8001a12:	2b30      	cmp	r3, #48	; 0x30
 8001a14:	d822      	bhi.n	8001a5c <HAL_CAN_IRQHandler+0x334>
 8001a16:	2b10      	cmp	r3, #16
 8001a18:	d002      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x2f8>
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	d005      	beq.n	8001a2a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a1e:	e01d      	b.n	8001a5c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	f043 0308 	orr.w	r3, r3, #8
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a28:	e019      	b.n	8001a5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	f043 0310 	orr.w	r3, r3, #16
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a32:	e014      	b.n	8001a5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	f043 0320 	orr.w	r3, r3, #32
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a3c:	e00f      	b.n	8001a5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a46:	e00a      	b.n	8001a5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a50:	e005      	b.n	8001a5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a5a:	e000      	b.n	8001a5e <HAL_CAN_IRQHandler+0x336>
            break;
 8001a5c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699a      	ldr	r2, [r3, #24]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a6c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2204      	movs	r2, #4
 8001a74:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f872 	bl	8001b72 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	f003 0307 	and.w	r3, r3, #7
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	db0b      	blt.n	8001c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	4907      	ldr	r1, [pc, #28]	; (8001c24 <__NVIC_EnableIRQ+0x38>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000e100 	.word	0xe000e100

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	; (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	; (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	; 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf4:	d301      	bcc.n	8001cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00f      	b.n	8001d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <SysTick_Config+0x40>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d02:	210f      	movs	r1, #15
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d08:	f7ff ff8e 	bl	8001c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <SysTick_Config+0x40>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <SysTick_Config+0x40>)
 8001d14:	2207      	movs	r2, #7
 8001d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	e000e010 	.word	0xe000e010

08001d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff29 	bl	8001b88 <__NVIC_SetPriorityGrouping>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d50:	f7ff ff3e 	bl	8001bd0 <__NVIC_GetPriorityGrouping>
 8001d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7ff ff8e 	bl	8001c7c <NVIC_EncodePriority>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff5d 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff31 	bl	8001bec <__NVIC_EnableIRQ>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffa2 	bl	8001ce4 <SysTick_Config>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	e16b      	b.n	80020a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dc8:	2201      	movs	r2, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	f040 815a 	bne.w	800209a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d005      	beq.n	8001dfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d130      	bne.n	8001e60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e34:	2201      	movs	r2, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 0201 	and.w	r2, r3, #1
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d017      	beq.n	8001e9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d123      	bne.n	8001ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	08da      	lsrs	r2, r3, #3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3208      	adds	r2, #8
 8001eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	08da      	lsrs	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3208      	adds	r2, #8
 8001eea:	69b9      	ldr	r1, [r7, #24]
 8001eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0203 	and.w	r2, r3, #3
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80b4 	beq.w	800209a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b60      	ldr	r3, [pc, #384]	; (80020b8 <HAL_GPIO_Init+0x30c>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a5f      	ldr	r2, [pc, #380]	; (80020b8 <HAL_GPIO_Init+0x30c>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	4b5d      	ldr	r3, [pc, #372]	; (80020b8 <HAL_GPIO_Init+0x30c>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f4e:	4a5b      	ldr	r2, [pc, #364]	; (80020bc <HAL_GPIO_Init+0x310>)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3302      	adds	r3, #2
 8001f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	220f      	movs	r2, #15
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a52      	ldr	r2, [pc, #328]	; (80020c0 <HAL_GPIO_Init+0x314>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d02b      	beq.n	8001fd2 <HAL_GPIO_Init+0x226>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a51      	ldr	r2, [pc, #324]	; (80020c4 <HAL_GPIO_Init+0x318>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d025      	beq.n	8001fce <HAL_GPIO_Init+0x222>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a50      	ldr	r2, [pc, #320]	; (80020c8 <HAL_GPIO_Init+0x31c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d01f      	beq.n	8001fca <HAL_GPIO_Init+0x21e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4f      	ldr	r2, [pc, #316]	; (80020cc <HAL_GPIO_Init+0x320>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d019      	beq.n	8001fc6 <HAL_GPIO_Init+0x21a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a4e      	ldr	r2, [pc, #312]	; (80020d0 <HAL_GPIO_Init+0x324>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_GPIO_Init+0x216>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4d      	ldr	r2, [pc, #308]	; (80020d4 <HAL_GPIO_Init+0x328>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00d      	beq.n	8001fbe <HAL_GPIO_Init+0x212>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4c      	ldr	r2, [pc, #304]	; (80020d8 <HAL_GPIO_Init+0x32c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d007      	beq.n	8001fba <HAL_GPIO_Init+0x20e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4b      	ldr	r2, [pc, #300]	; (80020dc <HAL_GPIO_Init+0x330>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_GPIO_Init+0x20a>
 8001fb2:	2307      	movs	r3, #7
 8001fb4:	e00e      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	e00c      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fba:	2306      	movs	r3, #6
 8001fbc:	e00a      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fbe:	2305      	movs	r3, #5
 8001fc0:	e008      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	e006      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e004      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e002      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_GPIO_Init+0x228>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	f002 0203 	and.w	r2, r2, #3
 8001fda:	0092      	lsls	r2, r2, #2
 8001fdc:	4093      	lsls	r3, r2
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe4:	4935      	ldr	r1, [pc, #212]	; (80020bc <HAL_GPIO_Init+0x310>)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	3302      	adds	r3, #2
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <HAL_GPIO_Init+0x334>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002016:	4a32      	ldr	r2, [pc, #200]	; (80020e0 <HAL_GPIO_Init+0x334>)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800201c:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_GPIO_Init+0x334>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002040:	4a27      	ldr	r2, [pc, #156]	; (80020e0 <HAL_GPIO_Init+0x334>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <HAL_GPIO_Init+0x334>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800206a:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <HAL_GPIO_Init+0x334>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_GPIO_Init+0x334>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002094:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <HAL_GPIO_Init+0x334>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3301      	adds	r3, #1
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b0f      	cmp	r3, #15
 80020a4:	f67f ae90 	bls.w	8001dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40013800 	.word	0x40013800
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40020400 	.word	0x40020400
 80020c8:	40020800 	.word	0x40020800
 80020cc:	40020c00 	.word	0x40020c00
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40021400 	.word	0x40021400
 80020d8:	40021800 	.word	0x40021800
 80020dc:	40021c00 	.word	0x40021c00
 80020e0:	40013c00 	.word	0x40013c00

080020e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
 80020f0:	4613      	mov	r3, r2
 80020f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020f4:	787b      	ldrb	r3, [r7, #1]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002100:	e003      	b.n	800210a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002102:	887b      	ldrh	r3, [r7, #2]
 8002104:	041a      	lsls	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	619a      	str	r2, [r3, #24]
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f806 	bl	8002148 <HAL_GPIO_EXTI_Callback>
  }
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40013c00 	.word	0x40013c00

08002148 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e12b      	b.n	80023ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fdea 	bl	8000d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2224      	movs	r2, #36	; 0x24
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021c4:	f001 f9b6 	bl	8003534 <HAL_RCC_GetPCLK1Freq>
 80021c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4a81      	ldr	r2, [pc, #516]	; (80023d4 <HAL_I2C_Init+0x274>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d807      	bhi.n	80021e4 <HAL_I2C_Init+0x84>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4a80      	ldr	r2, [pc, #512]	; (80023d8 <HAL_I2C_Init+0x278>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	bf94      	ite	ls
 80021dc:	2301      	movls	r3, #1
 80021de:	2300      	movhi	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	e006      	b.n	80021f2 <HAL_I2C_Init+0x92>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4a7d      	ldr	r2, [pc, #500]	; (80023dc <HAL_I2C_Init+0x27c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	bf94      	ite	ls
 80021ec:	2301      	movls	r3, #1
 80021ee:	2300      	movhi	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0e7      	b.n	80023ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4a78      	ldr	r2, [pc, #480]	; (80023e0 <HAL_I2C_Init+0x280>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0c9b      	lsrs	r3, r3, #18
 8002204:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a6a      	ldr	r2, [pc, #424]	; (80023d4 <HAL_I2C_Init+0x274>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d802      	bhi.n	8002234 <HAL_I2C_Init+0xd4>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3301      	adds	r3, #1
 8002232:	e009      	b.n	8002248 <HAL_I2C_Init+0xe8>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	4a69      	ldr	r2, [pc, #420]	; (80023e4 <HAL_I2C_Init+0x284>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	099b      	lsrs	r3, r3, #6
 8002246:	3301      	adds	r3, #1
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	430b      	orrs	r3, r1
 800224e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800225a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	495c      	ldr	r1, [pc, #368]	; (80023d4 <HAL_I2C_Init+0x274>)
 8002264:	428b      	cmp	r3, r1
 8002266:	d819      	bhi.n	800229c <HAL_I2C_Init+0x13c>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1e59      	subs	r1, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fbb1 f3f3 	udiv	r3, r1, r3
 8002276:	1c59      	adds	r1, r3, #1
 8002278:	f640 73fc 	movw	r3, #4092	; 0xffc
 800227c:	400b      	ands	r3, r1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_I2C_Init+0x138>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1e59      	subs	r1, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002290:	3301      	adds	r3, #1
 8002292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002296:	e051      	b.n	800233c <HAL_I2C_Init+0x1dc>
 8002298:	2304      	movs	r3, #4
 800229a:	e04f      	b.n	800233c <HAL_I2C_Init+0x1dc>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d111      	bne.n	80022c8 <HAL_I2C_Init+0x168>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1e58      	subs	r0, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	440b      	add	r3, r1
 80022b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	e012      	b.n	80022ee <HAL_I2C_Init+0x18e>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	0099      	lsls	r1, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Init+0x196>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e022      	b.n	800233c <HAL_I2C_Init+0x1dc>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10e      	bne.n	800231c <HAL_I2C_Init+0x1bc>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1e58      	subs	r0, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	440b      	add	r3, r1
 800230c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231a:	e00f      	b.n	800233c <HAL_I2C_Init+0x1dc>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1e58      	subs	r0, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	0099      	lsls	r1, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	6809      	ldr	r1, [r1, #0]
 8002340:	4313      	orrs	r3, r2
 8002342:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800236a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6911      	ldr	r1, [r2, #16]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68d2      	ldr	r2, [r2, #12]
 8002376:	4311      	orrs	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	430b      	orrs	r3, r1
 800237e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	000186a0 	.word	0x000186a0
 80023d8:	001e847f 	.word	0x001e847f
 80023dc:	003d08ff 	.word	0x003d08ff
 80023e0:	431bde83 	.word	0x431bde83
 80023e4:	10624dd3 	.word	0x10624dd3

080023e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	461a      	mov	r2, r3
 80023f4:	460b      	mov	r3, r1
 80023f6:	817b      	strh	r3, [r7, #10]
 80023f8:	4613      	mov	r3, r2
 80023fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7fe fe0c 	bl	8001018 <HAL_GetTick>
 8002400:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	f040 80e0 	bne.w	80025d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2319      	movs	r3, #25
 8002416:	2201      	movs	r2, #1
 8002418:	4970      	ldr	r1, [pc, #448]	; (80025dc <HAL_I2C_Master_Transmit+0x1f4>)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fa92 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002426:	2302      	movs	r3, #2
 8002428:	e0d3      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_I2C_Master_Transmit+0x50>
 8002434:	2302      	movs	r3, #2
 8002436:	e0cc      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d007      	beq.n	800245e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0201 	orr.w	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800246c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2221      	movs	r2, #33	; 0x21
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2210      	movs	r2, #16
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	893a      	ldrh	r2, [r7, #8]
 800248e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a50      	ldr	r2, [pc, #320]	; (80025e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024a0:	8979      	ldrh	r1, [r7, #10]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	6a3a      	ldr	r2, [r7, #32]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f9ca 	bl	8002840 <I2C_MasterRequestWrite>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e08d      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024cc:	e066      	b.n	800259c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	6a39      	ldr	r1, [r7, #32]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fb0c 	bl	8002af0 <I2C_WaitOnTXEFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d107      	bne.n	80024f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e06b      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b04      	cmp	r3, #4
 8002536:	d11b      	bne.n	8002570 <HAL_I2C_Master_Transmit+0x188>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	d017      	beq.n	8002570 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	6a39      	ldr	r1, [r7, #32]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fafc 	bl	8002b72 <I2C_WaitOnBTFFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	2b04      	cmp	r3, #4
 8002586:	d107      	bne.n	8002598 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002596:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e01a      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d194      	bne.n	80024ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e000      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025d0:	2302      	movs	r3, #2
  }
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	00100002 	.word	0x00100002
 80025e0:	ffff0000 	.word	0xffff0000

080025e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	460b      	mov	r3, r1
 80025f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80025f4:	f7fe fd10 	bl	8001018 <HAL_GetTick>
 80025f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b20      	cmp	r3, #32
 8002608:	f040 8111 	bne.w	800282e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2319      	movs	r3, #25
 8002612:	2201      	movs	r2, #1
 8002614:	4988      	ldr	r1, [pc, #544]	; (8002838 <HAL_I2C_IsDeviceReady+0x254>)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f994 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002622:	2302      	movs	r3, #2
 8002624:	e104      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_I2C_IsDeviceReady+0x50>
 8002630:	2302      	movs	r3, #2
 8002632:	e0fd      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d007      	beq.n	800265a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002668:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2224      	movs	r2, #36	; 0x24
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4a70      	ldr	r2, [pc, #448]	; (800283c <HAL_I2C_IsDeviceReady+0x258>)
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800268c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2200      	movs	r2, #0
 8002696:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f952 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00d      	beq.n	80026c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b4:	d103      	bne.n	80026be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0b6      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026c2:	897b      	ldrh	r3, [r7, #10]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80026d2:	f7fe fca1 	bl	8001018 <HAL_GetTick>
 80026d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	bf0c      	ite	eq
 80026e6:	2301      	moveq	r3, #1
 80026e8:	2300      	movne	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002706:	e025      	b.n	8002754 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002708:	f7fe fc86 	bl	8001018 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d302      	bcc.n	800271e <HAL_I2C_IsDeviceReady+0x13a>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d103      	bne.n	8002726 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	22a0      	movs	r2, #160	; 0xa0
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2ba0      	cmp	r3, #160	; 0xa0
 800275e:	d005      	beq.n	800276c <HAL_I2C_IsDeviceReady+0x188>
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <HAL_I2C_IsDeviceReady+0x188>
 8002766:	7dbb      	ldrb	r3, [r7, #22]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0cd      	beq.n	8002708 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d129      	bne.n	80027d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002790:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2319      	movs	r3, #25
 80027ae:	2201      	movs	r2, #1
 80027b0:	4921      	ldr	r1, [pc, #132]	; (8002838 <HAL_I2C_IsDeviceReady+0x254>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f8c6 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e036      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e02c      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	2319      	movs	r3, #25
 80027f6:	2201      	movs	r2, #1
 80027f8:	490f      	ldr	r1, [pc, #60]	; (8002838 <HAL_I2C_IsDeviceReady+0x254>)
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f8a2 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e012      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	3301      	adds	r3, #1
 800280e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	429a      	cmp	r2, r3
 8002816:	f4ff af32 	bcc.w	800267e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
  }
}
 8002830:	4618      	mov	r0, r3
 8002832:	3720      	adds	r7, #32
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	00100002 	.word	0x00100002
 800283c:	ffff0000 	.word	0xffff0000

08002840 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	460b      	mov	r3, r1
 800284e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d006      	beq.n	800286a <I2C_MasterRequestWrite+0x2a>
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d003      	beq.n	800286a <I2C_MasterRequestWrite+0x2a>
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002868:	d108      	bne.n	800287c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e00b      	b.n	8002894 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	2b12      	cmp	r3, #18
 8002882:	d107      	bne.n	8002894 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002892:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f84f 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00d      	beq.n	80028c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ba:	d103      	bne.n	80028c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e035      	b.n	8002934 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028d0:	d108      	bne.n	80028e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028d2:	897b      	ldrh	r3, [r7, #10]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028e0:	611a      	str	r2, [r3, #16]
 80028e2:	e01b      	b.n	800291c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028e4:	897b      	ldrh	r3, [r7, #10]
 80028e6:	11db      	asrs	r3, r3, #7
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f003 0306 	and.w	r3, r3, #6
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f063 030f 	orn	r3, r3, #15
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	490e      	ldr	r1, [pc, #56]	; (800293c <I2C_MasterRequestWrite+0xfc>)
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f875 	bl	80029f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e010      	b.n	8002934 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002912:	897b      	ldrh	r3, [r7, #10]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4907      	ldr	r1, [pc, #28]	; (8002940 <I2C_MasterRequestWrite+0x100>)
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f865 	bl	80029f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	00010008 	.word	0x00010008
 8002940:	00010002 	.word	0x00010002

08002944 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	4613      	mov	r3, r2
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002954:	e025      	b.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800295c:	d021      	beq.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295e:	f7fe fb5b 	bl	8001018 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d302      	bcc.n	8002974 <I2C_WaitOnFlagUntilTimeout+0x30>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d116      	bne.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f043 0220 	orr.w	r2, r3, #32
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e023      	b.n	80029ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d10d      	bne.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	43da      	mvns	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4013      	ands	r3, r2
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	e00c      	b.n	80029e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	43da      	mvns	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4013      	ands	r3, r2
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf0c      	ite	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	2300      	movne	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d0b6      	beq.n	8002956 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a00:	e051      	b.n	8002aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a10:	d123      	bne.n	8002a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a20:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a2a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f043 0204 	orr.w	r2, r3, #4
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e046      	b.n	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a60:	d021      	beq.n	8002aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a62:	f7fe fad9 	bl	8001018 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d116      	bne.n	8002aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f043 0220 	orr.w	r2, r3, #32
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e020      	b.n	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	0c1b      	lsrs	r3, r3, #16
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10c      	bne.n	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4013      	ands	r3, r2
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bf14      	ite	ne
 8002ac2:	2301      	movne	r3, #1
 8002ac4:	2300      	moveq	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	e00b      	b.n	8002ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d18d      	bne.n	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002afc:	e02d      	b.n	8002b5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f878 	bl	8002bf4 <I2C_IsAcknowledgeFailed>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e02d      	b.n	8002b6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b14:	d021      	beq.n	8002b5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b16:	f7fe fa7f 	bl	8001018 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d302      	bcc.n	8002b2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d116      	bne.n	8002b5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f043 0220 	orr.w	r2, r3, #32
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e007      	b.n	8002b6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b64:	2b80      	cmp	r3, #128	; 0x80
 8002b66:	d1ca      	bne.n	8002afe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b7e:	e02d      	b.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f837 	bl	8002bf4 <I2C_IsAcknowledgeFailed>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e02d      	b.n	8002bec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b96:	d021      	beq.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b98:	f7fe fa3e 	bl	8001018 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d302      	bcc.n	8002bae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d116      	bne.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e007      	b.n	8002bec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d1ca      	bne.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0a:	d11b      	bne.n	8002c44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f043 0204 	orr.w	r2, r3, #4
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e267      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d075      	beq.n	8002d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c72:	4b88      	ldr	r3, [pc, #544]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d00c      	beq.n	8002c98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c7e:	4b85      	ldr	r3, [pc, #532]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d112      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8a:	4b82      	ldr	r3, [pc, #520]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c96:	d10b      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	4b7e      	ldr	r3, [pc, #504]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d05b      	beq.n	8002d5c <HAL_RCC_OscConfig+0x108>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d157      	bne.n	8002d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e242      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb8:	d106      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x74>
 8002cba:	4b76      	ldr	r3, [pc, #472]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a75      	ldr	r2, [pc, #468]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e01d      	b.n	8002d04 <HAL_RCC_OscConfig+0xb0>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0x98>
 8002cd2:	4b70      	ldr	r3, [pc, #448]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a6f      	ldr	r2, [pc, #444]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4b6d      	ldr	r3, [pc, #436]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6c      	ldr	r2, [pc, #432]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e00b      	b.n	8002d04 <HAL_RCC_OscConfig+0xb0>
 8002cec:	4b69      	ldr	r3, [pc, #420]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a68      	ldr	r2, [pc, #416]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	4b66      	ldr	r3, [pc, #408]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a65      	ldr	r2, [pc, #404]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d013      	beq.n	8002d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7fe f984 	bl	8001018 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d14:	f7fe f980 	bl	8001018 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	; 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e207      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4b5b      	ldr	r3, [pc, #364]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0xc0>
 8002d32:	e014      	b.n	8002d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7fe f970 	bl	8001018 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d3c:	f7fe f96c 	bl	8001018 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b64      	cmp	r3, #100	; 0x64
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e1f3      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	4b51      	ldr	r3, [pc, #324]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0xe8>
 8002d5a:	e000      	b.n	8002d5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d063      	beq.n	8002e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d6a:	4b4a      	ldr	r3, [pc, #296]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d76:	4b47      	ldr	r3, [pc, #284]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d11c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d82:	4b44      	ldr	r3, [pc, #272]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d116      	bne.n	8002dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8e:	4b41      	ldr	r3, [pc, #260]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d005      	beq.n	8002da6 <HAL_RCC_OscConfig+0x152>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d001      	beq.n	8002da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e1c7      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da6:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4937      	ldr	r1, [pc, #220]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dba:	e03a      	b.n	8002e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d020      	beq.n	8002e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc4:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <HAL_RCC_OscConfig+0x244>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7fe f925 	bl	8001018 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd2:	f7fe f921 	bl	8001018 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e1a8      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de4:	4b2b      	ldr	r3, [pc, #172]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df0:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4925      	ldr	r1, [pc, #148]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]
 8002e04:	e015      	b.n	8002e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e06:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <HAL_RCC_OscConfig+0x244>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe f904 	bl	8001018 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e14:	f7fe f900 	bl	8001018 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e187      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e26:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d036      	beq.n	8002eac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d016      	beq.n	8002e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <HAL_RCC_OscConfig+0x248>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4c:	f7fe f8e4 	bl	8001018 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e54:	f7fe f8e0 	bl	8001018 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e167      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCC_OscConfig+0x240>)
 8002e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x200>
 8002e72:	e01b      	b.n	8002eac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_RCC_OscConfig+0x248>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7a:	f7fe f8cd 	bl	8001018 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e80:	e00e      	b.n	8002ea0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e82:	f7fe f8c9 	bl	8001018 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d907      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e150      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
 8002e94:	40023800 	.word	0x40023800
 8002e98:	42470000 	.word	0x42470000
 8002e9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea0:	4b88      	ldr	r3, [pc, #544]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1ea      	bne.n	8002e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8097 	beq.w	8002fe8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ebe:	4b81      	ldr	r3, [pc, #516]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	4b7d      	ldr	r3, [pc, #500]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a7c      	ldr	r2, [pc, #496]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eda:	4b7a      	ldr	r3, [pc, #488]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eea:	4b77      	ldr	r3, [pc, #476]	; (80030c8 <HAL_RCC_OscConfig+0x474>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d118      	bne.n	8002f28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ef6:	4b74      	ldr	r3, [pc, #464]	; (80030c8 <HAL_RCC_OscConfig+0x474>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a73      	ldr	r2, [pc, #460]	; (80030c8 <HAL_RCC_OscConfig+0x474>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f02:	f7fe f889 	bl	8001018 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0a:	f7fe f885 	bl	8001018 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e10c      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1c:	4b6a      	ldr	r3, [pc, #424]	; (80030c8 <HAL_RCC_OscConfig+0x474>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d106      	bne.n	8002f3e <HAL_RCC_OscConfig+0x2ea>
 8002f30:	4b64      	ldr	r3, [pc, #400]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	4a63      	ldr	r2, [pc, #396]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3c:	e01c      	b.n	8002f78 <HAL_RCC_OscConfig+0x324>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b05      	cmp	r3, #5
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x30c>
 8002f46:	4b5f      	ldr	r3, [pc, #380]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	4a5e      	ldr	r2, [pc, #376]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	6713      	str	r3, [r2, #112]	; 0x70
 8002f52:	4b5c      	ldr	r3, [pc, #368]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	4a5b      	ldr	r2, [pc, #364]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5e:	e00b      	b.n	8002f78 <HAL_RCC_OscConfig+0x324>
 8002f60:	4b58      	ldr	r3, [pc, #352]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	4a57      	ldr	r2, [pc, #348]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002f66:	f023 0301 	bic.w	r3, r3, #1
 8002f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6c:	4b55      	ldr	r3, [pc, #340]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	4a54      	ldr	r2, [pc, #336]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002f72:	f023 0304 	bic.w	r3, r3, #4
 8002f76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d015      	beq.n	8002fac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7fe f84a 	bl	8001018 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7fe f846 	bl	8001018 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0cb      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9e:	4b49      	ldr	r3, [pc, #292]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0ee      	beq.n	8002f88 <HAL_RCC_OscConfig+0x334>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fac:	f7fe f834 	bl	8001018 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fe f830 	bl	8001018 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e0b5      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fca:	4b3e      	ldr	r3, [pc, #248]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1ee      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d105      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fdc:	4b39      	ldr	r3, [pc, #228]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	4a38      	ldr	r2, [pc, #224]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80a1 	beq.w	8003134 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ff2:	4b34      	ldr	r3, [pc, #208]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d05c      	beq.n	80030b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d141      	bne.n	800308a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003006:	4b31      	ldr	r3, [pc, #196]	; (80030cc <HAL_RCC_OscConfig+0x478>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7fe f804 	bl	8001018 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe f800 	bl	8001018 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e087      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003026:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	019b      	lsls	r3, r3, #6
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	3b01      	subs	r3, #1
 800304c:	041b      	lsls	r3, r3, #16
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	061b      	lsls	r3, r3, #24
 8003056:	491b      	ldr	r1, [pc, #108]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800305c:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_RCC_OscConfig+0x478>)
 800305e:	2201      	movs	r2, #1
 8003060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003062:	f7fd ffd9 	bl	8001018 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306a:	f7fd ffd5 	bl	8001018 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e05c      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307c:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCC_OscConfig+0x416>
 8003088:	e054      	b.n	8003134 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308a:	4b10      	ldr	r3, [pc, #64]	; (80030cc <HAL_RCC_OscConfig+0x478>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003090:	f7fd ffc2 	bl	8001018 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003098:	f7fd ffbe 	bl	8001018 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e045      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030aa:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <HAL_RCC_OscConfig+0x470>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0x444>
 80030b6:	e03d      	b.n	8003134 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d107      	bne.n	80030d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e038      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
 80030c4:	40023800 	.word	0x40023800
 80030c8:	40007000 	.word	0x40007000
 80030cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030d0:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <HAL_RCC_OscConfig+0x4ec>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d028      	beq.n	8003130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d121      	bne.n	8003130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d11a      	bne.n	8003130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003100:	4013      	ands	r3, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003106:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003108:	4293      	cmp	r3, r2
 800310a:	d111      	bne.n	8003130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	3b01      	subs	r3, #1
 800311a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d107      	bne.n	8003130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800312c:	429a      	cmp	r2, r3
 800312e:	d001      	beq.n	8003134 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800

08003144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0cc      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003158:	4b68      	ldr	r3, [pc, #416]	; (80032fc <HAL_RCC_ClockConfig+0x1b8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d90c      	bls.n	8003180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b65      	ldr	r3, [pc, #404]	; (80032fc <HAL_RCC_ClockConfig+0x1b8>)
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b63      	ldr	r3, [pc, #396]	; (80032fc <HAL_RCC_ClockConfig+0x1b8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0b8      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d020      	beq.n	80031ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003198:	4b59      	ldr	r3, [pc, #356]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4a58      	ldr	r2, [pc, #352]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b0:	4b53      	ldr	r3, [pc, #332]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	4a52      	ldr	r2, [pc, #328]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031bc:	4b50      	ldr	r3, [pc, #320]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	494d      	ldr	r1, [pc, #308]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d044      	beq.n	8003264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e2:	4b47      	ldr	r3, [pc, #284]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d119      	bne.n	8003222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e07f      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d003      	beq.n	8003202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d107      	bne.n	8003212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003202:	4b3f      	ldr	r3, [pc, #252]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e06f      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003212:	4b3b      	ldr	r3, [pc, #236]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e067      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003222:	4b37      	ldr	r3, [pc, #220]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f023 0203 	bic.w	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4934      	ldr	r1, [pc, #208]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	4313      	orrs	r3, r2
 8003232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003234:	f7fd fef0 	bl	8001018 <HAL_GetTick>
 8003238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	e00a      	b.n	8003252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323c:	f7fd feec 	bl	8001018 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e04f      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	4b2b      	ldr	r3, [pc, #172]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 020c 	and.w	r2, r3, #12
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	429a      	cmp	r2, r3
 8003262:	d1eb      	bne.n	800323c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003264:	4b25      	ldr	r3, [pc, #148]	; (80032fc <HAL_RCC_ClockConfig+0x1b8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d20c      	bcs.n	800328c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b22      	ldr	r3, [pc, #136]	; (80032fc <HAL_RCC_ClockConfig+0x1b8>)
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b20      	ldr	r3, [pc, #128]	; (80032fc <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e032      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003298:	4b19      	ldr	r3, [pc, #100]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4916      	ldr	r1, [pc, #88]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032b6:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	490e      	ldr	r1, [pc, #56]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032ca:	f000 f821 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 80032ce:	4602      	mov	r2, r0
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	490a      	ldr	r1, [pc, #40]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 80032dc:	5ccb      	ldrb	r3, [r1, r3]
 80032de:	fa22 f303 	lsr.w	r3, r2, r3
 80032e2:	4a09      	ldr	r2, [pc, #36]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_RCC_ClockConfig+0x1c8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd fe50 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023c00 	.word	0x40023c00
 8003300:	40023800 	.word	0x40023800
 8003304:	08003f5c 	.word	0x08003f5c
 8003308:	20000000 	.word	0x20000000
 800330c:	20000004 	.word	0x20000004

08003310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003314:	b094      	sub	sp, #80	; 0x50
 8003316:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	647b      	str	r3, [r7, #68]	; 0x44
 800331c:	2300      	movs	r3, #0
 800331e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003320:	2300      	movs	r3, #0
 8003322:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003328:	4b79      	ldr	r3, [pc, #484]	; (8003510 <HAL_RCC_GetSysClockFreq+0x200>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b08      	cmp	r3, #8
 8003332:	d00d      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x40>
 8003334:	2b08      	cmp	r3, #8
 8003336:	f200 80e1 	bhi.w	80034fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x34>
 800333e:	2b04      	cmp	r3, #4
 8003340:	d003      	beq.n	800334a <HAL_RCC_GetSysClockFreq+0x3a>
 8003342:	e0db      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003344:	4b73      	ldr	r3, [pc, #460]	; (8003514 <HAL_RCC_GetSysClockFreq+0x204>)
 8003346:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003348:	e0db      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800334a:	4b73      	ldr	r3, [pc, #460]	; (8003518 <HAL_RCC_GetSysClockFreq+0x208>)
 800334c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800334e:	e0d8      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003350:	4b6f      	ldr	r3, [pc, #444]	; (8003510 <HAL_RCC_GetSysClockFreq+0x200>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003358:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800335a:	4b6d      	ldr	r3, [pc, #436]	; (8003510 <HAL_RCC_GetSysClockFreq+0x200>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d063      	beq.n	800342e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003366:	4b6a      	ldr	r3, [pc, #424]	; (8003510 <HAL_RCC_GetSysClockFreq+0x200>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	099b      	lsrs	r3, r3, #6
 800336c:	2200      	movs	r2, #0
 800336e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003370:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
 800337a:	2300      	movs	r3, #0
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
 800337e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003382:	4622      	mov	r2, r4
 8003384:	462b      	mov	r3, r5
 8003386:	f04f 0000 	mov.w	r0, #0
 800338a:	f04f 0100 	mov.w	r1, #0
 800338e:	0159      	lsls	r1, r3, #5
 8003390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003394:	0150      	lsls	r0, r2, #5
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4621      	mov	r1, r4
 800339c:	1a51      	subs	r1, r2, r1
 800339e:	6139      	str	r1, [r7, #16]
 80033a0:	4629      	mov	r1, r5
 80033a2:	eb63 0301 	sbc.w	r3, r3, r1
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033b4:	4659      	mov	r1, fp
 80033b6:	018b      	lsls	r3, r1, #6
 80033b8:	4651      	mov	r1, sl
 80033ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033be:	4651      	mov	r1, sl
 80033c0:	018a      	lsls	r2, r1, #6
 80033c2:	4651      	mov	r1, sl
 80033c4:	ebb2 0801 	subs.w	r8, r2, r1
 80033c8:	4659      	mov	r1, fp
 80033ca:	eb63 0901 	sbc.w	r9, r3, r1
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033e2:	4690      	mov	r8, r2
 80033e4:	4699      	mov	r9, r3
 80033e6:	4623      	mov	r3, r4
 80033e8:	eb18 0303 	adds.w	r3, r8, r3
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	462b      	mov	r3, r5
 80033f0:	eb49 0303 	adc.w	r3, r9, r3
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003402:	4629      	mov	r1, r5
 8003404:	024b      	lsls	r3, r1, #9
 8003406:	4621      	mov	r1, r4
 8003408:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800340c:	4621      	mov	r1, r4
 800340e:	024a      	lsls	r2, r1, #9
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003416:	2200      	movs	r2, #0
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
 800341a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800341c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003420:	f7fc ff2e 	bl	8000280 <__aeabi_uldivmod>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4613      	mov	r3, r2
 800342a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800342c:	e058      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342e:	4b38      	ldr	r3, [pc, #224]	; (8003510 <HAL_RCC_GetSysClockFreq+0x200>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	2200      	movs	r2, #0
 8003436:	4618      	mov	r0, r3
 8003438:	4611      	mov	r1, r2
 800343a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800343e:	623b      	str	r3, [r7, #32]
 8003440:	2300      	movs	r3, #0
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
 8003444:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003448:	4642      	mov	r2, r8
 800344a:	464b      	mov	r3, r9
 800344c:	f04f 0000 	mov.w	r0, #0
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	0159      	lsls	r1, r3, #5
 8003456:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800345a:	0150      	lsls	r0, r2, #5
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4641      	mov	r1, r8
 8003462:	ebb2 0a01 	subs.w	sl, r2, r1
 8003466:	4649      	mov	r1, r9
 8003468:	eb63 0b01 	sbc.w	fp, r3, r1
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003478:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800347c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003480:	ebb2 040a 	subs.w	r4, r2, sl
 8003484:	eb63 050b 	sbc.w	r5, r3, fp
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	00eb      	lsls	r3, r5, #3
 8003492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003496:	00e2      	lsls	r2, r4, #3
 8003498:	4614      	mov	r4, r2
 800349a:	461d      	mov	r5, r3
 800349c:	4643      	mov	r3, r8
 800349e:	18e3      	adds	r3, r4, r3
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	464b      	mov	r3, r9
 80034a4:	eb45 0303 	adc.w	r3, r5, r3
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034b6:	4629      	mov	r1, r5
 80034b8:	028b      	lsls	r3, r1, #10
 80034ba:	4621      	mov	r1, r4
 80034bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c0:	4621      	mov	r1, r4
 80034c2:	028a      	lsls	r2, r1, #10
 80034c4:	4610      	mov	r0, r2
 80034c6:	4619      	mov	r1, r3
 80034c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ca:	2200      	movs	r2, #0
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	61fa      	str	r2, [r7, #28]
 80034d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034d4:	f7fc fed4 	bl	8000280 <__aeabi_uldivmod>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4613      	mov	r3, r2
 80034de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	3301      	adds	r3, #1
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80034f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034fa:	e002      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_RCC_GetSysClockFreq+0x204>)
 80034fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003504:	4618      	mov	r0, r3
 8003506:	3750      	adds	r7, #80	; 0x50
 8003508:	46bd      	mov	sp, r7
 800350a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800
 8003514:	00f42400 	.word	0x00f42400
 8003518:	007a1200 	.word	0x007a1200

0800351c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003520:	4b03      	ldr	r3, [pc, #12]	; (8003530 <HAL_RCC_GetHCLKFreq+0x14>)
 8003522:	681b      	ldr	r3, [r3, #0]
}
 8003524:	4618      	mov	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20000000 	.word	0x20000000

08003534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003538:	f7ff fff0 	bl	800351c <HAL_RCC_GetHCLKFreq>
 800353c:	4602      	mov	r2, r0
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	0a9b      	lsrs	r3, r3, #10
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	4903      	ldr	r1, [pc, #12]	; (8003558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800354a:	5ccb      	ldrb	r3, [r1, r3]
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003550:	4618      	mov	r0, r3
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40023800 	.word	0x40023800
 8003558:	08003f6c 	.word	0x08003f6c

0800355c <siprintf>:
 800355c:	b40e      	push	{r1, r2, r3}
 800355e:	b500      	push	{lr}
 8003560:	b09c      	sub	sp, #112	; 0x70
 8003562:	ab1d      	add	r3, sp, #116	; 0x74
 8003564:	9002      	str	r0, [sp, #8]
 8003566:	9006      	str	r0, [sp, #24]
 8003568:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800356c:	4809      	ldr	r0, [pc, #36]	; (8003594 <siprintf+0x38>)
 800356e:	9107      	str	r1, [sp, #28]
 8003570:	9104      	str	r1, [sp, #16]
 8003572:	4909      	ldr	r1, [pc, #36]	; (8003598 <siprintf+0x3c>)
 8003574:	f853 2b04 	ldr.w	r2, [r3], #4
 8003578:	9105      	str	r1, [sp, #20]
 800357a:	6800      	ldr	r0, [r0, #0]
 800357c:	9301      	str	r3, [sp, #4]
 800357e:	a902      	add	r1, sp, #8
 8003580:	f000 f9b2 	bl	80038e8 <_svfiprintf_r>
 8003584:	9b02      	ldr	r3, [sp, #8]
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
 800358a:	b01c      	add	sp, #112	; 0x70
 800358c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003590:	b003      	add	sp, #12
 8003592:	4770      	bx	lr
 8003594:	20000058 	.word	0x20000058
 8003598:	ffff0208 	.word	0xffff0208

0800359c <_vsiprintf_r>:
 800359c:	b500      	push	{lr}
 800359e:	b09b      	sub	sp, #108	; 0x6c
 80035a0:	9100      	str	r1, [sp, #0]
 80035a2:	9104      	str	r1, [sp, #16]
 80035a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035a8:	9105      	str	r1, [sp, #20]
 80035aa:	9102      	str	r1, [sp, #8]
 80035ac:	4905      	ldr	r1, [pc, #20]	; (80035c4 <_vsiprintf_r+0x28>)
 80035ae:	9103      	str	r1, [sp, #12]
 80035b0:	4669      	mov	r1, sp
 80035b2:	f000 f999 	bl	80038e8 <_svfiprintf_r>
 80035b6:	9b00      	ldr	r3, [sp, #0]
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	b01b      	add	sp, #108	; 0x6c
 80035be:	f85d fb04 	ldr.w	pc, [sp], #4
 80035c2:	bf00      	nop
 80035c4:	ffff0208 	.word	0xffff0208

080035c8 <vsiprintf>:
 80035c8:	4613      	mov	r3, r2
 80035ca:	460a      	mov	r2, r1
 80035cc:	4601      	mov	r1, r0
 80035ce:	4802      	ldr	r0, [pc, #8]	; (80035d8 <vsiprintf+0x10>)
 80035d0:	6800      	ldr	r0, [r0, #0]
 80035d2:	f7ff bfe3 	b.w	800359c <_vsiprintf_r>
 80035d6:	bf00      	nop
 80035d8:	20000058 	.word	0x20000058

080035dc <memset>:
 80035dc:	4402      	add	r2, r0
 80035de:	4603      	mov	r3, r0
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d100      	bne.n	80035e6 <memset+0xa>
 80035e4:	4770      	bx	lr
 80035e6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ea:	e7f9      	b.n	80035e0 <memset+0x4>

080035ec <__errno>:
 80035ec:	4b01      	ldr	r3, [pc, #4]	; (80035f4 <__errno+0x8>)
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	20000058 	.word	0x20000058

080035f8 <__libc_init_array>:
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	4d0d      	ldr	r5, [pc, #52]	; (8003630 <__libc_init_array+0x38>)
 80035fc:	4c0d      	ldr	r4, [pc, #52]	; (8003634 <__libc_init_array+0x3c>)
 80035fe:	1b64      	subs	r4, r4, r5
 8003600:	10a4      	asrs	r4, r4, #2
 8003602:	2600      	movs	r6, #0
 8003604:	42a6      	cmp	r6, r4
 8003606:	d109      	bne.n	800361c <__libc_init_array+0x24>
 8003608:	4d0b      	ldr	r5, [pc, #44]	; (8003638 <__libc_init_array+0x40>)
 800360a:	4c0c      	ldr	r4, [pc, #48]	; (800363c <__libc_init_array+0x44>)
 800360c:	f000 fc6a 	bl	8003ee4 <_init>
 8003610:	1b64      	subs	r4, r4, r5
 8003612:	10a4      	asrs	r4, r4, #2
 8003614:	2600      	movs	r6, #0
 8003616:	42a6      	cmp	r6, r4
 8003618:	d105      	bne.n	8003626 <__libc_init_array+0x2e>
 800361a:	bd70      	pop	{r4, r5, r6, pc}
 800361c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003620:	4798      	blx	r3
 8003622:	3601      	adds	r6, #1
 8003624:	e7ee      	b.n	8003604 <__libc_init_array+0xc>
 8003626:	f855 3b04 	ldr.w	r3, [r5], #4
 800362a:	4798      	blx	r3
 800362c:	3601      	adds	r6, #1
 800362e:	e7f2      	b.n	8003616 <__libc_init_array+0x1e>
 8003630:	08003fb0 	.word	0x08003fb0
 8003634:	08003fb0 	.word	0x08003fb0
 8003638:	08003fb0 	.word	0x08003fb0
 800363c:	08003fb4 	.word	0x08003fb4

08003640 <__retarget_lock_acquire_recursive>:
 8003640:	4770      	bx	lr

08003642 <__retarget_lock_release_recursive>:
 8003642:	4770      	bx	lr

08003644 <_free_r>:
 8003644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003646:	2900      	cmp	r1, #0
 8003648:	d044      	beq.n	80036d4 <_free_r+0x90>
 800364a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800364e:	9001      	str	r0, [sp, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	f1a1 0404 	sub.w	r4, r1, #4
 8003656:	bfb8      	it	lt
 8003658:	18e4      	addlt	r4, r4, r3
 800365a:	f000 f8df 	bl	800381c <__malloc_lock>
 800365e:	4a1e      	ldr	r2, [pc, #120]	; (80036d8 <_free_r+0x94>)
 8003660:	9801      	ldr	r0, [sp, #4]
 8003662:	6813      	ldr	r3, [r2, #0]
 8003664:	b933      	cbnz	r3, 8003674 <_free_r+0x30>
 8003666:	6063      	str	r3, [r4, #4]
 8003668:	6014      	str	r4, [r2, #0]
 800366a:	b003      	add	sp, #12
 800366c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003670:	f000 b8da 	b.w	8003828 <__malloc_unlock>
 8003674:	42a3      	cmp	r3, r4
 8003676:	d908      	bls.n	800368a <_free_r+0x46>
 8003678:	6825      	ldr	r5, [r4, #0]
 800367a:	1961      	adds	r1, r4, r5
 800367c:	428b      	cmp	r3, r1
 800367e:	bf01      	itttt	eq
 8003680:	6819      	ldreq	r1, [r3, #0]
 8003682:	685b      	ldreq	r3, [r3, #4]
 8003684:	1949      	addeq	r1, r1, r5
 8003686:	6021      	streq	r1, [r4, #0]
 8003688:	e7ed      	b.n	8003666 <_free_r+0x22>
 800368a:	461a      	mov	r2, r3
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	b10b      	cbz	r3, 8003694 <_free_r+0x50>
 8003690:	42a3      	cmp	r3, r4
 8003692:	d9fa      	bls.n	800368a <_free_r+0x46>
 8003694:	6811      	ldr	r1, [r2, #0]
 8003696:	1855      	adds	r5, r2, r1
 8003698:	42a5      	cmp	r5, r4
 800369a:	d10b      	bne.n	80036b4 <_free_r+0x70>
 800369c:	6824      	ldr	r4, [r4, #0]
 800369e:	4421      	add	r1, r4
 80036a0:	1854      	adds	r4, r2, r1
 80036a2:	42a3      	cmp	r3, r4
 80036a4:	6011      	str	r1, [r2, #0]
 80036a6:	d1e0      	bne.n	800366a <_free_r+0x26>
 80036a8:	681c      	ldr	r4, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	6053      	str	r3, [r2, #4]
 80036ae:	440c      	add	r4, r1
 80036b0:	6014      	str	r4, [r2, #0]
 80036b2:	e7da      	b.n	800366a <_free_r+0x26>
 80036b4:	d902      	bls.n	80036bc <_free_r+0x78>
 80036b6:	230c      	movs	r3, #12
 80036b8:	6003      	str	r3, [r0, #0]
 80036ba:	e7d6      	b.n	800366a <_free_r+0x26>
 80036bc:	6825      	ldr	r5, [r4, #0]
 80036be:	1961      	adds	r1, r4, r5
 80036c0:	428b      	cmp	r3, r1
 80036c2:	bf04      	itt	eq
 80036c4:	6819      	ldreq	r1, [r3, #0]
 80036c6:	685b      	ldreq	r3, [r3, #4]
 80036c8:	6063      	str	r3, [r4, #4]
 80036ca:	bf04      	itt	eq
 80036cc:	1949      	addeq	r1, r1, r5
 80036ce:	6021      	streq	r1, [r4, #0]
 80036d0:	6054      	str	r4, [r2, #4]
 80036d2:	e7ca      	b.n	800366a <_free_r+0x26>
 80036d4:	b003      	add	sp, #12
 80036d6:	bd30      	pop	{r4, r5, pc}
 80036d8:	20000268 	.word	0x20000268

080036dc <sbrk_aligned>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	4e0e      	ldr	r6, [pc, #56]	; (8003718 <sbrk_aligned+0x3c>)
 80036e0:	460c      	mov	r4, r1
 80036e2:	6831      	ldr	r1, [r6, #0]
 80036e4:	4605      	mov	r5, r0
 80036e6:	b911      	cbnz	r1, 80036ee <sbrk_aligned+0x12>
 80036e8:	f000 fba6 	bl	8003e38 <_sbrk_r>
 80036ec:	6030      	str	r0, [r6, #0]
 80036ee:	4621      	mov	r1, r4
 80036f0:	4628      	mov	r0, r5
 80036f2:	f000 fba1 	bl	8003e38 <_sbrk_r>
 80036f6:	1c43      	adds	r3, r0, #1
 80036f8:	d00a      	beq.n	8003710 <sbrk_aligned+0x34>
 80036fa:	1cc4      	adds	r4, r0, #3
 80036fc:	f024 0403 	bic.w	r4, r4, #3
 8003700:	42a0      	cmp	r0, r4
 8003702:	d007      	beq.n	8003714 <sbrk_aligned+0x38>
 8003704:	1a21      	subs	r1, r4, r0
 8003706:	4628      	mov	r0, r5
 8003708:	f000 fb96 	bl	8003e38 <_sbrk_r>
 800370c:	3001      	adds	r0, #1
 800370e:	d101      	bne.n	8003714 <sbrk_aligned+0x38>
 8003710:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003714:	4620      	mov	r0, r4
 8003716:	bd70      	pop	{r4, r5, r6, pc}
 8003718:	2000026c 	.word	0x2000026c

0800371c <_malloc_r>:
 800371c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003720:	1ccd      	adds	r5, r1, #3
 8003722:	f025 0503 	bic.w	r5, r5, #3
 8003726:	3508      	adds	r5, #8
 8003728:	2d0c      	cmp	r5, #12
 800372a:	bf38      	it	cc
 800372c:	250c      	movcc	r5, #12
 800372e:	2d00      	cmp	r5, #0
 8003730:	4607      	mov	r7, r0
 8003732:	db01      	blt.n	8003738 <_malloc_r+0x1c>
 8003734:	42a9      	cmp	r1, r5
 8003736:	d905      	bls.n	8003744 <_malloc_r+0x28>
 8003738:	230c      	movs	r3, #12
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	2600      	movs	r6, #0
 800373e:	4630      	mov	r0, r6
 8003740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003744:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003818 <_malloc_r+0xfc>
 8003748:	f000 f868 	bl	800381c <__malloc_lock>
 800374c:	f8d8 3000 	ldr.w	r3, [r8]
 8003750:	461c      	mov	r4, r3
 8003752:	bb5c      	cbnz	r4, 80037ac <_malloc_r+0x90>
 8003754:	4629      	mov	r1, r5
 8003756:	4638      	mov	r0, r7
 8003758:	f7ff ffc0 	bl	80036dc <sbrk_aligned>
 800375c:	1c43      	adds	r3, r0, #1
 800375e:	4604      	mov	r4, r0
 8003760:	d155      	bne.n	800380e <_malloc_r+0xf2>
 8003762:	f8d8 4000 	ldr.w	r4, [r8]
 8003766:	4626      	mov	r6, r4
 8003768:	2e00      	cmp	r6, #0
 800376a:	d145      	bne.n	80037f8 <_malloc_r+0xdc>
 800376c:	2c00      	cmp	r4, #0
 800376e:	d048      	beq.n	8003802 <_malloc_r+0xe6>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	4631      	mov	r1, r6
 8003774:	4638      	mov	r0, r7
 8003776:	eb04 0903 	add.w	r9, r4, r3
 800377a:	f000 fb5d 	bl	8003e38 <_sbrk_r>
 800377e:	4581      	cmp	r9, r0
 8003780:	d13f      	bne.n	8003802 <_malloc_r+0xe6>
 8003782:	6821      	ldr	r1, [r4, #0]
 8003784:	1a6d      	subs	r5, r5, r1
 8003786:	4629      	mov	r1, r5
 8003788:	4638      	mov	r0, r7
 800378a:	f7ff ffa7 	bl	80036dc <sbrk_aligned>
 800378e:	3001      	adds	r0, #1
 8003790:	d037      	beq.n	8003802 <_malloc_r+0xe6>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	442b      	add	r3, r5
 8003796:	6023      	str	r3, [r4, #0]
 8003798:	f8d8 3000 	ldr.w	r3, [r8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d038      	beq.n	8003812 <_malloc_r+0xf6>
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	42a2      	cmp	r2, r4
 80037a4:	d12b      	bne.n	80037fe <_malloc_r+0xe2>
 80037a6:	2200      	movs	r2, #0
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	e00f      	b.n	80037cc <_malloc_r+0xb0>
 80037ac:	6822      	ldr	r2, [r4, #0]
 80037ae:	1b52      	subs	r2, r2, r5
 80037b0:	d41f      	bmi.n	80037f2 <_malloc_r+0xd6>
 80037b2:	2a0b      	cmp	r2, #11
 80037b4:	d917      	bls.n	80037e6 <_malloc_r+0xca>
 80037b6:	1961      	adds	r1, r4, r5
 80037b8:	42a3      	cmp	r3, r4
 80037ba:	6025      	str	r5, [r4, #0]
 80037bc:	bf18      	it	ne
 80037be:	6059      	strne	r1, [r3, #4]
 80037c0:	6863      	ldr	r3, [r4, #4]
 80037c2:	bf08      	it	eq
 80037c4:	f8c8 1000 	streq.w	r1, [r8]
 80037c8:	5162      	str	r2, [r4, r5]
 80037ca:	604b      	str	r3, [r1, #4]
 80037cc:	4638      	mov	r0, r7
 80037ce:	f104 060b 	add.w	r6, r4, #11
 80037d2:	f000 f829 	bl	8003828 <__malloc_unlock>
 80037d6:	f026 0607 	bic.w	r6, r6, #7
 80037da:	1d23      	adds	r3, r4, #4
 80037dc:	1af2      	subs	r2, r6, r3
 80037de:	d0ae      	beq.n	800373e <_malloc_r+0x22>
 80037e0:	1b9b      	subs	r3, r3, r6
 80037e2:	50a3      	str	r3, [r4, r2]
 80037e4:	e7ab      	b.n	800373e <_malloc_r+0x22>
 80037e6:	42a3      	cmp	r3, r4
 80037e8:	6862      	ldr	r2, [r4, #4]
 80037ea:	d1dd      	bne.n	80037a8 <_malloc_r+0x8c>
 80037ec:	f8c8 2000 	str.w	r2, [r8]
 80037f0:	e7ec      	b.n	80037cc <_malloc_r+0xb0>
 80037f2:	4623      	mov	r3, r4
 80037f4:	6864      	ldr	r4, [r4, #4]
 80037f6:	e7ac      	b.n	8003752 <_malloc_r+0x36>
 80037f8:	4634      	mov	r4, r6
 80037fa:	6876      	ldr	r6, [r6, #4]
 80037fc:	e7b4      	b.n	8003768 <_malloc_r+0x4c>
 80037fe:	4613      	mov	r3, r2
 8003800:	e7cc      	b.n	800379c <_malloc_r+0x80>
 8003802:	230c      	movs	r3, #12
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	4638      	mov	r0, r7
 8003808:	f000 f80e 	bl	8003828 <__malloc_unlock>
 800380c:	e797      	b.n	800373e <_malloc_r+0x22>
 800380e:	6025      	str	r5, [r4, #0]
 8003810:	e7dc      	b.n	80037cc <_malloc_r+0xb0>
 8003812:	605b      	str	r3, [r3, #4]
 8003814:	deff      	udf	#255	; 0xff
 8003816:	bf00      	nop
 8003818:	20000268 	.word	0x20000268

0800381c <__malloc_lock>:
 800381c:	4801      	ldr	r0, [pc, #4]	; (8003824 <__malloc_lock+0x8>)
 800381e:	f7ff bf0f 	b.w	8003640 <__retarget_lock_acquire_recursive>
 8003822:	bf00      	nop
 8003824:	20000264 	.word	0x20000264

08003828 <__malloc_unlock>:
 8003828:	4801      	ldr	r0, [pc, #4]	; (8003830 <__malloc_unlock+0x8>)
 800382a:	f7ff bf0a 	b.w	8003642 <__retarget_lock_release_recursive>
 800382e:	bf00      	nop
 8003830:	20000264 	.word	0x20000264

08003834 <__ssputs_r>:
 8003834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003838:	688e      	ldr	r6, [r1, #8]
 800383a:	461f      	mov	r7, r3
 800383c:	42be      	cmp	r6, r7
 800383e:	680b      	ldr	r3, [r1, #0]
 8003840:	4682      	mov	sl, r0
 8003842:	460c      	mov	r4, r1
 8003844:	4690      	mov	r8, r2
 8003846:	d82c      	bhi.n	80038a2 <__ssputs_r+0x6e>
 8003848:	898a      	ldrh	r2, [r1, #12]
 800384a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800384e:	d026      	beq.n	800389e <__ssputs_r+0x6a>
 8003850:	6965      	ldr	r5, [r4, #20]
 8003852:	6909      	ldr	r1, [r1, #16]
 8003854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003858:	eba3 0901 	sub.w	r9, r3, r1
 800385c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003860:	1c7b      	adds	r3, r7, #1
 8003862:	444b      	add	r3, r9
 8003864:	106d      	asrs	r5, r5, #1
 8003866:	429d      	cmp	r5, r3
 8003868:	bf38      	it	cc
 800386a:	461d      	movcc	r5, r3
 800386c:	0553      	lsls	r3, r2, #21
 800386e:	d527      	bpl.n	80038c0 <__ssputs_r+0x8c>
 8003870:	4629      	mov	r1, r5
 8003872:	f7ff ff53 	bl	800371c <_malloc_r>
 8003876:	4606      	mov	r6, r0
 8003878:	b360      	cbz	r0, 80038d4 <__ssputs_r+0xa0>
 800387a:	6921      	ldr	r1, [r4, #16]
 800387c:	464a      	mov	r2, r9
 800387e:	f000 faeb 	bl	8003e58 <memcpy>
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388c:	81a3      	strh	r3, [r4, #12]
 800388e:	6126      	str	r6, [r4, #16]
 8003890:	6165      	str	r5, [r4, #20]
 8003892:	444e      	add	r6, r9
 8003894:	eba5 0509 	sub.w	r5, r5, r9
 8003898:	6026      	str	r6, [r4, #0]
 800389a:	60a5      	str	r5, [r4, #8]
 800389c:	463e      	mov	r6, r7
 800389e:	42be      	cmp	r6, r7
 80038a0:	d900      	bls.n	80038a4 <__ssputs_r+0x70>
 80038a2:	463e      	mov	r6, r7
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	4632      	mov	r2, r6
 80038a8:	4641      	mov	r1, r8
 80038aa:	f000 faab 	bl	8003e04 <memmove>
 80038ae:	68a3      	ldr	r3, [r4, #8]
 80038b0:	1b9b      	subs	r3, r3, r6
 80038b2:	60a3      	str	r3, [r4, #8]
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	4433      	add	r3, r6
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	2000      	movs	r0, #0
 80038bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c0:	462a      	mov	r2, r5
 80038c2:	f000 fad7 	bl	8003e74 <_realloc_r>
 80038c6:	4606      	mov	r6, r0
 80038c8:	2800      	cmp	r0, #0
 80038ca:	d1e0      	bne.n	800388e <__ssputs_r+0x5a>
 80038cc:	6921      	ldr	r1, [r4, #16]
 80038ce:	4650      	mov	r0, sl
 80038d0:	f7ff feb8 	bl	8003644 <_free_r>
 80038d4:	230c      	movs	r3, #12
 80038d6:	f8ca 3000 	str.w	r3, [sl]
 80038da:	89a3      	ldrh	r3, [r4, #12]
 80038dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e0:	81a3      	strh	r3, [r4, #12]
 80038e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038e6:	e7e9      	b.n	80038bc <__ssputs_r+0x88>

080038e8 <_svfiprintf_r>:
 80038e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ec:	4698      	mov	r8, r3
 80038ee:	898b      	ldrh	r3, [r1, #12]
 80038f0:	061b      	lsls	r3, r3, #24
 80038f2:	b09d      	sub	sp, #116	; 0x74
 80038f4:	4607      	mov	r7, r0
 80038f6:	460d      	mov	r5, r1
 80038f8:	4614      	mov	r4, r2
 80038fa:	d50e      	bpl.n	800391a <_svfiprintf_r+0x32>
 80038fc:	690b      	ldr	r3, [r1, #16]
 80038fe:	b963      	cbnz	r3, 800391a <_svfiprintf_r+0x32>
 8003900:	2140      	movs	r1, #64	; 0x40
 8003902:	f7ff ff0b 	bl	800371c <_malloc_r>
 8003906:	6028      	str	r0, [r5, #0]
 8003908:	6128      	str	r0, [r5, #16]
 800390a:	b920      	cbnz	r0, 8003916 <_svfiprintf_r+0x2e>
 800390c:	230c      	movs	r3, #12
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003914:	e0d0      	b.n	8003ab8 <_svfiprintf_r+0x1d0>
 8003916:	2340      	movs	r3, #64	; 0x40
 8003918:	616b      	str	r3, [r5, #20]
 800391a:	2300      	movs	r3, #0
 800391c:	9309      	str	r3, [sp, #36]	; 0x24
 800391e:	2320      	movs	r3, #32
 8003920:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003924:	f8cd 800c 	str.w	r8, [sp, #12]
 8003928:	2330      	movs	r3, #48	; 0x30
 800392a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ad0 <_svfiprintf_r+0x1e8>
 800392e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003932:	f04f 0901 	mov.w	r9, #1
 8003936:	4623      	mov	r3, r4
 8003938:	469a      	mov	sl, r3
 800393a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800393e:	b10a      	cbz	r2, 8003944 <_svfiprintf_r+0x5c>
 8003940:	2a25      	cmp	r2, #37	; 0x25
 8003942:	d1f9      	bne.n	8003938 <_svfiprintf_r+0x50>
 8003944:	ebba 0b04 	subs.w	fp, sl, r4
 8003948:	d00b      	beq.n	8003962 <_svfiprintf_r+0x7a>
 800394a:	465b      	mov	r3, fp
 800394c:	4622      	mov	r2, r4
 800394e:	4629      	mov	r1, r5
 8003950:	4638      	mov	r0, r7
 8003952:	f7ff ff6f 	bl	8003834 <__ssputs_r>
 8003956:	3001      	adds	r0, #1
 8003958:	f000 80a9 	beq.w	8003aae <_svfiprintf_r+0x1c6>
 800395c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800395e:	445a      	add	r2, fp
 8003960:	9209      	str	r2, [sp, #36]	; 0x24
 8003962:	f89a 3000 	ldrb.w	r3, [sl]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80a1 	beq.w	8003aae <_svfiprintf_r+0x1c6>
 800396c:	2300      	movs	r3, #0
 800396e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003976:	f10a 0a01 	add.w	sl, sl, #1
 800397a:	9304      	str	r3, [sp, #16]
 800397c:	9307      	str	r3, [sp, #28]
 800397e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003982:	931a      	str	r3, [sp, #104]	; 0x68
 8003984:	4654      	mov	r4, sl
 8003986:	2205      	movs	r2, #5
 8003988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800398c:	4850      	ldr	r0, [pc, #320]	; (8003ad0 <_svfiprintf_r+0x1e8>)
 800398e:	f7fc fc27 	bl	80001e0 <memchr>
 8003992:	9a04      	ldr	r2, [sp, #16]
 8003994:	b9d8      	cbnz	r0, 80039ce <_svfiprintf_r+0xe6>
 8003996:	06d0      	lsls	r0, r2, #27
 8003998:	bf44      	itt	mi
 800399a:	2320      	movmi	r3, #32
 800399c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039a0:	0711      	lsls	r1, r2, #28
 80039a2:	bf44      	itt	mi
 80039a4:	232b      	movmi	r3, #43	; 0x2b
 80039a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039aa:	f89a 3000 	ldrb.w	r3, [sl]
 80039ae:	2b2a      	cmp	r3, #42	; 0x2a
 80039b0:	d015      	beq.n	80039de <_svfiprintf_r+0xf6>
 80039b2:	9a07      	ldr	r2, [sp, #28]
 80039b4:	4654      	mov	r4, sl
 80039b6:	2000      	movs	r0, #0
 80039b8:	f04f 0c0a 	mov.w	ip, #10
 80039bc:	4621      	mov	r1, r4
 80039be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039c2:	3b30      	subs	r3, #48	; 0x30
 80039c4:	2b09      	cmp	r3, #9
 80039c6:	d94d      	bls.n	8003a64 <_svfiprintf_r+0x17c>
 80039c8:	b1b0      	cbz	r0, 80039f8 <_svfiprintf_r+0x110>
 80039ca:	9207      	str	r2, [sp, #28]
 80039cc:	e014      	b.n	80039f8 <_svfiprintf_r+0x110>
 80039ce:	eba0 0308 	sub.w	r3, r0, r8
 80039d2:	fa09 f303 	lsl.w	r3, r9, r3
 80039d6:	4313      	orrs	r3, r2
 80039d8:	9304      	str	r3, [sp, #16]
 80039da:	46a2      	mov	sl, r4
 80039dc:	e7d2      	b.n	8003984 <_svfiprintf_r+0x9c>
 80039de:	9b03      	ldr	r3, [sp, #12]
 80039e0:	1d19      	adds	r1, r3, #4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	9103      	str	r1, [sp, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bfbb      	ittet	lt
 80039ea:	425b      	neglt	r3, r3
 80039ec:	f042 0202 	orrlt.w	r2, r2, #2
 80039f0:	9307      	strge	r3, [sp, #28]
 80039f2:	9307      	strlt	r3, [sp, #28]
 80039f4:	bfb8      	it	lt
 80039f6:	9204      	strlt	r2, [sp, #16]
 80039f8:	7823      	ldrb	r3, [r4, #0]
 80039fa:	2b2e      	cmp	r3, #46	; 0x2e
 80039fc:	d10c      	bne.n	8003a18 <_svfiprintf_r+0x130>
 80039fe:	7863      	ldrb	r3, [r4, #1]
 8003a00:	2b2a      	cmp	r3, #42	; 0x2a
 8003a02:	d134      	bne.n	8003a6e <_svfiprintf_r+0x186>
 8003a04:	9b03      	ldr	r3, [sp, #12]
 8003a06:	1d1a      	adds	r2, r3, #4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	9203      	str	r2, [sp, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bfb8      	it	lt
 8003a10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a14:	3402      	adds	r4, #2
 8003a16:	9305      	str	r3, [sp, #20]
 8003a18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003ae0 <_svfiprintf_r+0x1f8>
 8003a1c:	7821      	ldrb	r1, [r4, #0]
 8003a1e:	2203      	movs	r2, #3
 8003a20:	4650      	mov	r0, sl
 8003a22:	f7fc fbdd 	bl	80001e0 <memchr>
 8003a26:	b138      	cbz	r0, 8003a38 <_svfiprintf_r+0x150>
 8003a28:	9b04      	ldr	r3, [sp, #16]
 8003a2a:	eba0 000a 	sub.w	r0, r0, sl
 8003a2e:	2240      	movs	r2, #64	; 0x40
 8003a30:	4082      	lsls	r2, r0
 8003a32:	4313      	orrs	r3, r2
 8003a34:	3401      	adds	r4, #1
 8003a36:	9304      	str	r3, [sp, #16]
 8003a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a3c:	4825      	ldr	r0, [pc, #148]	; (8003ad4 <_svfiprintf_r+0x1ec>)
 8003a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a42:	2206      	movs	r2, #6
 8003a44:	f7fc fbcc 	bl	80001e0 <memchr>
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	d038      	beq.n	8003abe <_svfiprintf_r+0x1d6>
 8003a4c:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <_svfiprintf_r+0x1f0>)
 8003a4e:	bb1b      	cbnz	r3, 8003a98 <_svfiprintf_r+0x1b0>
 8003a50:	9b03      	ldr	r3, [sp, #12]
 8003a52:	3307      	adds	r3, #7
 8003a54:	f023 0307 	bic.w	r3, r3, #7
 8003a58:	3308      	adds	r3, #8
 8003a5a:	9303      	str	r3, [sp, #12]
 8003a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a5e:	4433      	add	r3, r6
 8003a60:	9309      	str	r3, [sp, #36]	; 0x24
 8003a62:	e768      	b.n	8003936 <_svfiprintf_r+0x4e>
 8003a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a68:	460c      	mov	r4, r1
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	e7a6      	b.n	80039bc <_svfiprintf_r+0xd4>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	3401      	adds	r4, #1
 8003a72:	9305      	str	r3, [sp, #20]
 8003a74:	4619      	mov	r1, r3
 8003a76:	f04f 0c0a 	mov.w	ip, #10
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a80:	3a30      	subs	r2, #48	; 0x30
 8003a82:	2a09      	cmp	r2, #9
 8003a84:	d903      	bls.n	8003a8e <_svfiprintf_r+0x1a6>
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0c6      	beq.n	8003a18 <_svfiprintf_r+0x130>
 8003a8a:	9105      	str	r1, [sp, #20]
 8003a8c:	e7c4      	b.n	8003a18 <_svfiprintf_r+0x130>
 8003a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a92:	4604      	mov	r4, r0
 8003a94:	2301      	movs	r3, #1
 8003a96:	e7f0      	b.n	8003a7a <_svfiprintf_r+0x192>
 8003a98:	ab03      	add	r3, sp, #12
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	462a      	mov	r2, r5
 8003a9e:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <_svfiprintf_r+0x1f4>)
 8003aa0:	a904      	add	r1, sp, #16
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f3af 8000 	nop.w
 8003aa8:	1c42      	adds	r2, r0, #1
 8003aaa:	4606      	mov	r6, r0
 8003aac:	d1d6      	bne.n	8003a5c <_svfiprintf_r+0x174>
 8003aae:	89ab      	ldrh	r3, [r5, #12]
 8003ab0:	065b      	lsls	r3, r3, #25
 8003ab2:	f53f af2d 	bmi.w	8003910 <_svfiprintf_r+0x28>
 8003ab6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ab8:	b01d      	add	sp, #116	; 0x74
 8003aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003abe:	ab03      	add	r3, sp, #12
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	462a      	mov	r2, r5
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <_svfiprintf_r+0x1f4>)
 8003ac6:	a904      	add	r1, sp, #16
 8003ac8:	4638      	mov	r0, r7
 8003aca:	f000 f879 	bl	8003bc0 <_printf_i>
 8003ace:	e7eb      	b.n	8003aa8 <_svfiprintf_r+0x1c0>
 8003ad0:	08003f74 	.word	0x08003f74
 8003ad4:	08003f7e 	.word	0x08003f7e
 8003ad8:	00000000 	.word	0x00000000
 8003adc:	08003835 	.word	0x08003835
 8003ae0:	08003f7a 	.word	0x08003f7a

08003ae4 <_printf_common>:
 8003ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae8:	4616      	mov	r6, r2
 8003aea:	4699      	mov	r9, r3
 8003aec:	688a      	ldr	r2, [r1, #8]
 8003aee:	690b      	ldr	r3, [r1, #16]
 8003af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003af4:	4293      	cmp	r3, r2
 8003af6:	bfb8      	it	lt
 8003af8:	4613      	movlt	r3, r2
 8003afa:	6033      	str	r3, [r6, #0]
 8003afc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b00:	4607      	mov	r7, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	b10a      	cbz	r2, 8003b0a <_printf_common+0x26>
 8003b06:	3301      	adds	r3, #1
 8003b08:	6033      	str	r3, [r6, #0]
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	0699      	lsls	r1, r3, #26
 8003b0e:	bf42      	ittt	mi
 8003b10:	6833      	ldrmi	r3, [r6, #0]
 8003b12:	3302      	addmi	r3, #2
 8003b14:	6033      	strmi	r3, [r6, #0]
 8003b16:	6825      	ldr	r5, [r4, #0]
 8003b18:	f015 0506 	ands.w	r5, r5, #6
 8003b1c:	d106      	bne.n	8003b2c <_printf_common+0x48>
 8003b1e:	f104 0a19 	add.w	sl, r4, #25
 8003b22:	68e3      	ldr	r3, [r4, #12]
 8003b24:	6832      	ldr	r2, [r6, #0]
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	42ab      	cmp	r3, r5
 8003b2a:	dc26      	bgt.n	8003b7a <_printf_common+0x96>
 8003b2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b30:	1e13      	subs	r3, r2, #0
 8003b32:	6822      	ldr	r2, [r4, #0]
 8003b34:	bf18      	it	ne
 8003b36:	2301      	movne	r3, #1
 8003b38:	0692      	lsls	r2, r2, #26
 8003b3a:	d42b      	bmi.n	8003b94 <_printf_common+0xb0>
 8003b3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b40:	4649      	mov	r1, r9
 8003b42:	4638      	mov	r0, r7
 8003b44:	47c0      	blx	r8
 8003b46:	3001      	adds	r0, #1
 8003b48:	d01e      	beq.n	8003b88 <_printf_common+0xa4>
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	6922      	ldr	r2, [r4, #16]
 8003b4e:	f003 0306 	and.w	r3, r3, #6
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	bf02      	ittt	eq
 8003b56:	68e5      	ldreq	r5, [r4, #12]
 8003b58:	6833      	ldreq	r3, [r6, #0]
 8003b5a:	1aed      	subeq	r5, r5, r3
 8003b5c:	68a3      	ldr	r3, [r4, #8]
 8003b5e:	bf0c      	ite	eq
 8003b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b64:	2500      	movne	r5, #0
 8003b66:	4293      	cmp	r3, r2
 8003b68:	bfc4      	itt	gt
 8003b6a:	1a9b      	subgt	r3, r3, r2
 8003b6c:	18ed      	addgt	r5, r5, r3
 8003b6e:	2600      	movs	r6, #0
 8003b70:	341a      	adds	r4, #26
 8003b72:	42b5      	cmp	r5, r6
 8003b74:	d11a      	bne.n	8003bac <_printf_common+0xc8>
 8003b76:	2000      	movs	r0, #0
 8003b78:	e008      	b.n	8003b8c <_printf_common+0xa8>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	4652      	mov	r2, sl
 8003b7e:	4649      	mov	r1, r9
 8003b80:	4638      	mov	r0, r7
 8003b82:	47c0      	blx	r8
 8003b84:	3001      	adds	r0, #1
 8003b86:	d103      	bne.n	8003b90 <_printf_common+0xac>
 8003b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b90:	3501      	adds	r5, #1
 8003b92:	e7c6      	b.n	8003b22 <_printf_common+0x3e>
 8003b94:	18e1      	adds	r1, r4, r3
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	2030      	movs	r0, #48	; 0x30
 8003b9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b9e:	4422      	add	r2, r4
 8003ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ba8:	3302      	adds	r3, #2
 8003baa:	e7c7      	b.n	8003b3c <_printf_common+0x58>
 8003bac:	2301      	movs	r3, #1
 8003bae:	4622      	mov	r2, r4
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	4638      	mov	r0, r7
 8003bb4:	47c0      	blx	r8
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	d0e6      	beq.n	8003b88 <_printf_common+0xa4>
 8003bba:	3601      	adds	r6, #1
 8003bbc:	e7d9      	b.n	8003b72 <_printf_common+0x8e>
	...

08003bc0 <_printf_i>:
 8003bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc4:	7e0f      	ldrb	r7, [r1, #24]
 8003bc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bc8:	2f78      	cmp	r7, #120	; 0x78
 8003bca:	4691      	mov	r9, r2
 8003bcc:	4680      	mov	r8, r0
 8003bce:	460c      	mov	r4, r1
 8003bd0:	469a      	mov	sl, r3
 8003bd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bd6:	d807      	bhi.n	8003be8 <_printf_i+0x28>
 8003bd8:	2f62      	cmp	r7, #98	; 0x62
 8003bda:	d80a      	bhi.n	8003bf2 <_printf_i+0x32>
 8003bdc:	2f00      	cmp	r7, #0
 8003bde:	f000 80d4 	beq.w	8003d8a <_printf_i+0x1ca>
 8003be2:	2f58      	cmp	r7, #88	; 0x58
 8003be4:	f000 80c0 	beq.w	8003d68 <_printf_i+0x1a8>
 8003be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bf0:	e03a      	b.n	8003c68 <_printf_i+0xa8>
 8003bf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bf6:	2b15      	cmp	r3, #21
 8003bf8:	d8f6      	bhi.n	8003be8 <_printf_i+0x28>
 8003bfa:	a101      	add	r1, pc, #4	; (adr r1, 8003c00 <_printf_i+0x40>)
 8003bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c00:	08003c59 	.word	0x08003c59
 8003c04:	08003c6d 	.word	0x08003c6d
 8003c08:	08003be9 	.word	0x08003be9
 8003c0c:	08003be9 	.word	0x08003be9
 8003c10:	08003be9 	.word	0x08003be9
 8003c14:	08003be9 	.word	0x08003be9
 8003c18:	08003c6d 	.word	0x08003c6d
 8003c1c:	08003be9 	.word	0x08003be9
 8003c20:	08003be9 	.word	0x08003be9
 8003c24:	08003be9 	.word	0x08003be9
 8003c28:	08003be9 	.word	0x08003be9
 8003c2c:	08003d71 	.word	0x08003d71
 8003c30:	08003c99 	.word	0x08003c99
 8003c34:	08003d2b 	.word	0x08003d2b
 8003c38:	08003be9 	.word	0x08003be9
 8003c3c:	08003be9 	.word	0x08003be9
 8003c40:	08003d93 	.word	0x08003d93
 8003c44:	08003be9 	.word	0x08003be9
 8003c48:	08003c99 	.word	0x08003c99
 8003c4c:	08003be9 	.word	0x08003be9
 8003c50:	08003be9 	.word	0x08003be9
 8003c54:	08003d33 	.word	0x08003d33
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	1d1a      	adds	r2, r3, #4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	602a      	str	r2, [r5, #0]
 8003c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e09f      	b.n	8003dac <_printf_i+0x1ec>
 8003c6c:	6820      	ldr	r0, [r4, #0]
 8003c6e:	682b      	ldr	r3, [r5, #0]
 8003c70:	0607      	lsls	r7, r0, #24
 8003c72:	f103 0104 	add.w	r1, r3, #4
 8003c76:	6029      	str	r1, [r5, #0]
 8003c78:	d501      	bpl.n	8003c7e <_printf_i+0xbe>
 8003c7a:	681e      	ldr	r6, [r3, #0]
 8003c7c:	e003      	b.n	8003c86 <_printf_i+0xc6>
 8003c7e:	0646      	lsls	r6, r0, #25
 8003c80:	d5fb      	bpl.n	8003c7a <_printf_i+0xba>
 8003c82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c86:	2e00      	cmp	r6, #0
 8003c88:	da03      	bge.n	8003c92 <_printf_i+0xd2>
 8003c8a:	232d      	movs	r3, #45	; 0x2d
 8003c8c:	4276      	negs	r6, r6
 8003c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c92:	485a      	ldr	r0, [pc, #360]	; (8003dfc <_printf_i+0x23c>)
 8003c94:	230a      	movs	r3, #10
 8003c96:	e012      	b.n	8003cbe <_printf_i+0xfe>
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	6820      	ldr	r0, [r4, #0]
 8003c9c:	1d19      	adds	r1, r3, #4
 8003c9e:	6029      	str	r1, [r5, #0]
 8003ca0:	0605      	lsls	r5, r0, #24
 8003ca2:	d501      	bpl.n	8003ca8 <_printf_i+0xe8>
 8003ca4:	681e      	ldr	r6, [r3, #0]
 8003ca6:	e002      	b.n	8003cae <_printf_i+0xee>
 8003ca8:	0641      	lsls	r1, r0, #25
 8003caa:	d5fb      	bpl.n	8003ca4 <_printf_i+0xe4>
 8003cac:	881e      	ldrh	r6, [r3, #0]
 8003cae:	4853      	ldr	r0, [pc, #332]	; (8003dfc <_printf_i+0x23c>)
 8003cb0:	2f6f      	cmp	r7, #111	; 0x6f
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2308      	moveq	r3, #8
 8003cb6:	230a      	movne	r3, #10
 8003cb8:	2100      	movs	r1, #0
 8003cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cbe:	6865      	ldr	r5, [r4, #4]
 8003cc0:	60a5      	str	r5, [r4, #8]
 8003cc2:	2d00      	cmp	r5, #0
 8003cc4:	bfa2      	ittt	ge
 8003cc6:	6821      	ldrge	r1, [r4, #0]
 8003cc8:	f021 0104 	bicge.w	r1, r1, #4
 8003ccc:	6021      	strge	r1, [r4, #0]
 8003cce:	b90e      	cbnz	r6, 8003cd4 <_printf_i+0x114>
 8003cd0:	2d00      	cmp	r5, #0
 8003cd2:	d04b      	beq.n	8003d6c <_printf_i+0x1ac>
 8003cd4:	4615      	mov	r5, r2
 8003cd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cda:	fb03 6711 	mls	r7, r3, r1, r6
 8003cde:	5dc7      	ldrb	r7, [r0, r7]
 8003ce0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ce4:	4637      	mov	r7, r6
 8003ce6:	42bb      	cmp	r3, r7
 8003ce8:	460e      	mov	r6, r1
 8003cea:	d9f4      	bls.n	8003cd6 <_printf_i+0x116>
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d10b      	bne.n	8003d08 <_printf_i+0x148>
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	07de      	lsls	r6, r3, #31
 8003cf4:	d508      	bpl.n	8003d08 <_printf_i+0x148>
 8003cf6:	6923      	ldr	r3, [r4, #16]
 8003cf8:	6861      	ldr	r1, [r4, #4]
 8003cfa:	4299      	cmp	r1, r3
 8003cfc:	bfde      	ittt	le
 8003cfe:	2330      	movle	r3, #48	; 0x30
 8003d00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d04:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003d08:	1b52      	subs	r2, r2, r5
 8003d0a:	6122      	str	r2, [r4, #16]
 8003d0c:	f8cd a000 	str.w	sl, [sp]
 8003d10:	464b      	mov	r3, r9
 8003d12:	aa03      	add	r2, sp, #12
 8003d14:	4621      	mov	r1, r4
 8003d16:	4640      	mov	r0, r8
 8003d18:	f7ff fee4 	bl	8003ae4 <_printf_common>
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d14a      	bne.n	8003db6 <_printf_i+0x1f6>
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d24:	b004      	add	sp, #16
 8003d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	f043 0320 	orr.w	r3, r3, #32
 8003d30:	6023      	str	r3, [r4, #0]
 8003d32:	4833      	ldr	r0, [pc, #204]	; (8003e00 <_printf_i+0x240>)
 8003d34:	2778      	movs	r7, #120	; 0x78
 8003d36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	6829      	ldr	r1, [r5, #0]
 8003d3e:	061f      	lsls	r7, r3, #24
 8003d40:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d44:	d402      	bmi.n	8003d4c <_printf_i+0x18c>
 8003d46:	065f      	lsls	r7, r3, #25
 8003d48:	bf48      	it	mi
 8003d4a:	b2b6      	uxthmi	r6, r6
 8003d4c:	07df      	lsls	r7, r3, #31
 8003d4e:	bf48      	it	mi
 8003d50:	f043 0320 	orrmi.w	r3, r3, #32
 8003d54:	6029      	str	r1, [r5, #0]
 8003d56:	bf48      	it	mi
 8003d58:	6023      	strmi	r3, [r4, #0]
 8003d5a:	b91e      	cbnz	r6, 8003d64 <_printf_i+0x1a4>
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	f023 0320 	bic.w	r3, r3, #32
 8003d62:	6023      	str	r3, [r4, #0]
 8003d64:	2310      	movs	r3, #16
 8003d66:	e7a7      	b.n	8003cb8 <_printf_i+0xf8>
 8003d68:	4824      	ldr	r0, [pc, #144]	; (8003dfc <_printf_i+0x23c>)
 8003d6a:	e7e4      	b.n	8003d36 <_printf_i+0x176>
 8003d6c:	4615      	mov	r5, r2
 8003d6e:	e7bd      	b.n	8003cec <_printf_i+0x12c>
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	6826      	ldr	r6, [r4, #0]
 8003d74:	6961      	ldr	r1, [r4, #20]
 8003d76:	1d18      	adds	r0, r3, #4
 8003d78:	6028      	str	r0, [r5, #0]
 8003d7a:	0635      	lsls	r5, r6, #24
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	d501      	bpl.n	8003d84 <_printf_i+0x1c4>
 8003d80:	6019      	str	r1, [r3, #0]
 8003d82:	e002      	b.n	8003d8a <_printf_i+0x1ca>
 8003d84:	0670      	lsls	r0, r6, #25
 8003d86:	d5fb      	bpl.n	8003d80 <_printf_i+0x1c0>
 8003d88:	8019      	strh	r1, [r3, #0]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	6123      	str	r3, [r4, #16]
 8003d8e:	4615      	mov	r5, r2
 8003d90:	e7bc      	b.n	8003d0c <_printf_i+0x14c>
 8003d92:	682b      	ldr	r3, [r5, #0]
 8003d94:	1d1a      	adds	r2, r3, #4
 8003d96:	602a      	str	r2, [r5, #0]
 8003d98:	681d      	ldr	r5, [r3, #0]
 8003d9a:	6862      	ldr	r2, [r4, #4]
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f7fc fa1e 	bl	80001e0 <memchr>
 8003da4:	b108      	cbz	r0, 8003daa <_printf_i+0x1ea>
 8003da6:	1b40      	subs	r0, r0, r5
 8003da8:	6060      	str	r0, [r4, #4]
 8003daa:	6863      	ldr	r3, [r4, #4]
 8003dac:	6123      	str	r3, [r4, #16]
 8003dae:	2300      	movs	r3, #0
 8003db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003db4:	e7aa      	b.n	8003d0c <_printf_i+0x14c>
 8003db6:	6923      	ldr	r3, [r4, #16]
 8003db8:	462a      	mov	r2, r5
 8003dba:	4649      	mov	r1, r9
 8003dbc:	4640      	mov	r0, r8
 8003dbe:	47d0      	blx	sl
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d0ad      	beq.n	8003d20 <_printf_i+0x160>
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	079b      	lsls	r3, r3, #30
 8003dc8:	d413      	bmi.n	8003df2 <_printf_i+0x232>
 8003dca:	68e0      	ldr	r0, [r4, #12]
 8003dcc:	9b03      	ldr	r3, [sp, #12]
 8003dce:	4298      	cmp	r0, r3
 8003dd0:	bfb8      	it	lt
 8003dd2:	4618      	movlt	r0, r3
 8003dd4:	e7a6      	b.n	8003d24 <_printf_i+0x164>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	4632      	mov	r2, r6
 8003dda:	4649      	mov	r1, r9
 8003ddc:	4640      	mov	r0, r8
 8003dde:	47d0      	blx	sl
 8003de0:	3001      	adds	r0, #1
 8003de2:	d09d      	beq.n	8003d20 <_printf_i+0x160>
 8003de4:	3501      	adds	r5, #1
 8003de6:	68e3      	ldr	r3, [r4, #12]
 8003de8:	9903      	ldr	r1, [sp, #12]
 8003dea:	1a5b      	subs	r3, r3, r1
 8003dec:	42ab      	cmp	r3, r5
 8003dee:	dcf2      	bgt.n	8003dd6 <_printf_i+0x216>
 8003df0:	e7eb      	b.n	8003dca <_printf_i+0x20a>
 8003df2:	2500      	movs	r5, #0
 8003df4:	f104 0619 	add.w	r6, r4, #25
 8003df8:	e7f5      	b.n	8003de6 <_printf_i+0x226>
 8003dfa:	bf00      	nop
 8003dfc:	08003f85 	.word	0x08003f85
 8003e00:	08003f96 	.word	0x08003f96

08003e04 <memmove>:
 8003e04:	4288      	cmp	r0, r1
 8003e06:	b510      	push	{r4, lr}
 8003e08:	eb01 0402 	add.w	r4, r1, r2
 8003e0c:	d902      	bls.n	8003e14 <memmove+0x10>
 8003e0e:	4284      	cmp	r4, r0
 8003e10:	4623      	mov	r3, r4
 8003e12:	d807      	bhi.n	8003e24 <memmove+0x20>
 8003e14:	1e43      	subs	r3, r0, #1
 8003e16:	42a1      	cmp	r1, r4
 8003e18:	d008      	beq.n	8003e2c <memmove+0x28>
 8003e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e22:	e7f8      	b.n	8003e16 <memmove+0x12>
 8003e24:	4402      	add	r2, r0
 8003e26:	4601      	mov	r1, r0
 8003e28:	428a      	cmp	r2, r1
 8003e2a:	d100      	bne.n	8003e2e <memmove+0x2a>
 8003e2c:	bd10      	pop	{r4, pc}
 8003e2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e36:	e7f7      	b.n	8003e28 <memmove+0x24>

08003e38 <_sbrk_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	4d06      	ldr	r5, [pc, #24]	; (8003e54 <_sbrk_r+0x1c>)
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	4604      	mov	r4, r0
 8003e40:	4608      	mov	r0, r1
 8003e42:	602b      	str	r3, [r5, #0]
 8003e44:	f7fd f810 	bl	8000e68 <_sbrk>
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	d102      	bne.n	8003e52 <_sbrk_r+0x1a>
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	b103      	cbz	r3, 8003e52 <_sbrk_r+0x1a>
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	bd38      	pop	{r3, r4, r5, pc}
 8003e54:	20000260 	.word	0x20000260

08003e58 <memcpy>:
 8003e58:	440a      	add	r2, r1
 8003e5a:	4291      	cmp	r1, r2
 8003e5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003e60:	d100      	bne.n	8003e64 <memcpy+0xc>
 8003e62:	4770      	bx	lr
 8003e64:	b510      	push	{r4, lr}
 8003e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e6e:	4291      	cmp	r1, r2
 8003e70:	d1f9      	bne.n	8003e66 <memcpy+0xe>
 8003e72:	bd10      	pop	{r4, pc}

08003e74 <_realloc_r>:
 8003e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e78:	4680      	mov	r8, r0
 8003e7a:	4614      	mov	r4, r2
 8003e7c:	460e      	mov	r6, r1
 8003e7e:	b921      	cbnz	r1, 8003e8a <_realloc_r+0x16>
 8003e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e84:	4611      	mov	r1, r2
 8003e86:	f7ff bc49 	b.w	800371c <_malloc_r>
 8003e8a:	b92a      	cbnz	r2, 8003e98 <_realloc_r+0x24>
 8003e8c:	f7ff fbda 	bl	8003644 <_free_r>
 8003e90:	4625      	mov	r5, r4
 8003e92:	4628      	mov	r0, r5
 8003e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e98:	f000 f81b 	bl	8003ed2 <_malloc_usable_size_r>
 8003e9c:	4284      	cmp	r4, r0
 8003e9e:	4607      	mov	r7, r0
 8003ea0:	d802      	bhi.n	8003ea8 <_realloc_r+0x34>
 8003ea2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ea6:	d812      	bhi.n	8003ece <_realloc_r+0x5a>
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	4640      	mov	r0, r8
 8003eac:	f7ff fc36 	bl	800371c <_malloc_r>
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d0ed      	beq.n	8003e92 <_realloc_r+0x1e>
 8003eb6:	42bc      	cmp	r4, r7
 8003eb8:	4622      	mov	r2, r4
 8003eba:	4631      	mov	r1, r6
 8003ebc:	bf28      	it	cs
 8003ebe:	463a      	movcs	r2, r7
 8003ec0:	f7ff ffca 	bl	8003e58 <memcpy>
 8003ec4:	4631      	mov	r1, r6
 8003ec6:	4640      	mov	r0, r8
 8003ec8:	f7ff fbbc 	bl	8003644 <_free_r>
 8003ecc:	e7e1      	b.n	8003e92 <_realloc_r+0x1e>
 8003ece:	4635      	mov	r5, r6
 8003ed0:	e7df      	b.n	8003e92 <_realloc_r+0x1e>

08003ed2 <_malloc_usable_size_r>:
 8003ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed6:	1f18      	subs	r0, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bfbc      	itt	lt
 8003edc:	580b      	ldrlt	r3, [r1, r0]
 8003ede:	18c0      	addlt	r0, r0, r3
 8003ee0:	4770      	bx	lr
	...

08003ee4 <_init>:
 8003ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee6:	bf00      	nop
 8003ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eea:	bc08      	pop	{r3}
 8003eec:	469e      	mov	lr, r3
 8003eee:	4770      	bx	lr

08003ef0 <_fini>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	bf00      	nop
 8003ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef6:	bc08      	pop	{r3}
 8003ef8:	469e      	mov	lr, r3
 8003efa:	4770      	bx	lr
